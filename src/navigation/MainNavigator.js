import React from "react";import { Dimensions } from "react-native";import { createBottomTabNavigator, createStackNavigator } from "react-navigation";import ReviewScreen from "../screens/Review/ReviewScreen";import DeckScreen from "../screens/DeckScreen";import SettingScreen from "../screens/SettingScreen";import AuthScreen from "../screens/Auth/AuthScreen";import TestScreen from "../screens/TestScreen";import WelcomeScreen from "../screens/Welcome/WelcomeScreen";import SignupScreen from "../screens/SignupScreen";import ProfileScreen from "../screens/Profile/ProfileScreen";import ExploreScreen from "../screens/Explore/ExploreScreen";import ReviewPetDetail from "../screens/Review/ReviewPetDetail";import ExplorePetDetail from "../screens/Explore/ExplorePetDetail";import MapWrapper from "../screens/Map/MapWrapper";import ReviewWrapper from "../screens/Review/ReviewWrapper";import ExploreWrapper from "../screens/Explore/ExploreWrapper";import DrawerComponent from "../components/Common/DrawerComponent";import { createDrawerNavigator } from "react-navigation-drawer";const { width: SCREEN_WIDTH } = Dimensions.get("window");const AuthNavigator = createStackNavigator({  auth: { screen: AuthScreen },  signup: { screen: SignupScreen }});const ReviewNavigator = createStackNavigator(  {    review: { screen: ReviewScreen },    review_detail: { screen: ReviewPetDetail }  },  {    //headerMode:'screen',    swipeEnabled: false,    navigationOptions: {      drawerLockMode: "locked-open"    }  });const ExploreNavigator = createStackNavigator(  {    explore: { screen: ExploreScreen },    explore_detail: { screen: ExplorePetDetail }  },  {    //headerMode:'screen',    swipeEnabled: false,    navigationOptions: {      drawerLockMode: "locked-open"    }  });const ProfileNavigator = createStackNavigator(  {    profile: { screen: ProfileScreen },    setting: { screen: SettingScreen }  },  {    //headerMode:'screen',    swipeEnabled: false,    navigationOptions: {      drawerLockMode: "locked-open"    }  });const DrawerNavigator = createDrawerNavigator(  {    mapWrapper: { screen: MapWrapper },    reviewWrapper: { screen: ReviewWrapper },    exploreWrapper: { screen: ExploreWrapper },    //profileWrapper: ProfileWrapper,//props =><ProfileWrapper {...props}/>,    setting: SettingScreen    //review: ReviewNavigator    /*review: createStackNavigator({      review: { screen: props=><ReviewScreen{...props}/>},      //review_detail: { screen: ReviewPetDetail },      //setting: { screen: SettingScreen }    })*/  },  {    swipeEnabled: false,    drawerPosition: "left",    drawerWidth: SCREEN_WIDTH,    drawerOpenRoute: "DrawerOpen",    drawerCloseRoute: "DrawerClose",    drawerToggleRoute: "DrawerToggle",    drawerBackgroundColor: "transparent",    contentComponent: props => <DrawerComponent {...props} />  });const MainNavigator = createBottomTabNavigator(  {    map: DrawerNavigator,    deck: { screen: DeckScreen },    review: ReviewNavigator,    profile: ProfileNavigator,    explore: ExploreNavigator,    //mapTest: { screen: ReviewWrapper }    test: { screen: TestScreen }  },  {    swipeEnabled: false,    tabBarOptions: {      //showLabel:false,      labelStyle: { fontSize: 10 },      activeTintColor: "tomato",      inactiveTintColor: "white",      style: { backgroundColor: "black" }    },    navigationOptions: {      tabBarVisible: false    }  });const AppNavigator = createBottomTabNavigator(  {    welcome: { screen: WelcomeScreen },    auth: { screen: AuthNavigator },    main: {      screen: DrawerNavigator //MainNavigator      /*tabBarOptions: {        labelStyle: { fontSize: 14 }      }*/    }  },  {    navigationOptions: {      tabBarVisible: false    },    lazy: true  });export default AppNavigator;