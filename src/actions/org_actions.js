import { firestore } from "../modules/firebase";import { Location } from "expo";const FETCH_ORGS = "fetchOrgs";const fetchOrgs = region => async dispatch => {  // console.log("start");  // let lat = 0.014;  // let lon = 0.018;  // let distance = 1000;  // let lowerLat = 34 - lat * distance;  // let lowerLon = 92 - lon * distance;  // let greaterLat = latitude + lat * distance;  // let greaterLon = longitude + lon * distance;  // let lesserGeopoint = new firebase.firestore.GeoPoint( 21, 32 );  //console.log("lessergeo", lesserGeopoint);  // let query = firestore  //   .collection("orgs")  //   .where("geoLocation", ">", lesserGeopoint)  //   .where("geoLocation", "<", greaterGeopoint);  // await query.get().then(querySnapShot => {  //   querySnapShot.forEach(doc => {  //     console.log("really?", doc.data());  //   });  // });  let tempArr = [];  try {    const location = await Location.reverseGeocodeAsync({      latitude: region.latitude,      longitude: region.longitude    });    console.log("fetchOrgs/location ", location);    let docRef = firestore      .collection("orgs")      .where("zip", "==", location[0].postalCode.toString());    await docRef      .get()      .then(querySnapshot => {        querySnapshot.forEach(doc => {          tempArr.push(doc.data());          // doc.data() is never undefined for query doc snapshots          console.log("doc ", doc.id, " => " /*doc.data()*/);        });      })      .catch(err => {        console.log("Error getting document", err);      });    console.log("tempArr", tempArr.length);  } catch (e) {    console.log(e);  }  dispatch({    type: FETCH_ORGS,    payload: tempArr  });};export { FETCH_ORGS, fetchOrgs };