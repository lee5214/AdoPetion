import React, { Component } from "react";import { Animated, Dimensions, Easing, StyleSheet, Text, View } from "react-native";const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class PetDetailList extends Component {  state = {    focusedPetIndex: -1,    elementAnimated: new Animated.Value(0)  };  startElementBounce = Animated.timing(this.state.elementAnimated, {    toValue: 300,    easing: Easing.linear  });  componentDidUpdate(prevProps, prevState) {    if (this.props.flag !== prevProps.flag) {      this.startElementBounce.start(this.state.elementAnimated.setValue(0));    }  }  _renderBlock = arr => {    if (arr.length) {      return arr.map(item => <View>{item.key}</View>);    }  };  render() {    let { size, age, sex, color, mix, sizeCurrent, sizeUOM, breed, birthdate, adoptionFee, descriptionPlain, status } = this.props.petObj;    //let data = [{ Availability: [{ Status: status }, { Fee: adoptionFee }] }];    const fadeBounce = this.state.elementAnimated.interpolate({      inputRange: [0, 160, 180, 300],      outputRange: [1, 0, 0, 1]    });    const elementMoveLeft = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, -50, 0]    });    const elementMoveRight = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, 50, 0]    });    const elementMoveUp = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, -50, 0]    });    const elementMoveDown = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, 50, 0]    });    return (      <View style={{ flex: 1 }}>        <Text style={{ marginHorizontal: 10, color: "white" }}>Availability</Text>        <View style={styles.row}>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Status </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>{status || "N/A"}</Animated.Text>          </View>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Fee </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>{adoptionFee || "N/A"}</Animated.Text>          </View>          <View style={{ flex: 1 }} />        </View>        <Text style={{ marginHorizontal: 10, color: "white" }}>Basic</Text>        <View style={styles.row}>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Age </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveLeft }] }]}>{age || "N/A"}</Animated.Text>          </View>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Sex </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>{sex}</Animated.Text>          </View>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Size </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>{size || "N/A"}</Animated.Text>          </View>        </View>        <Text style={{ marginHorizontal: 10, color: "white" }}>Extra</Text>        <View style={styles.row}>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Breed</Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>{breed || "N/A"}</Animated.Text>          </View>        </View>        <Text style={{ marginHorizontal: 10, color: "white" }}>Basic</Text>        <View style={styles.row}>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Birthday </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>{birthdate || "N/A"}</Animated.Text>          </View>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Weight </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>              {Number(sizeCurrent) > 0 && sizeUOM ? `${sizeCurrent} ${sizeUOM}` : "N/A"}            </Animated.Text>          </View>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Mix </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveLeft }] }]}>{mix || "N/A"}</Animated.Text>          </View>        </View>        <View style={styles.row}>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Color </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>{color || "N/A"}</Animated.Text>          </View>        </View>        <Text style={{ marginHorizontal: 10, color: "white" }}>By the saving hands</Text>        <View style={styles.row}>          <View style={styles.eContainer}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Description </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>{descriptionPlain || "N/A"}</Animated.Text>          </View>        </View>      </View>    );  }}const styles = StyleSheet.create({  row: { flexDirection: "row", marginVertical: 10, justifyContent: "space-between" },  eContainer: { flex: 1, overflow: "hidden", backgroundColor: "white", margin: 10, padding: 10, borderRadius: 5, shadowColor: "white" },  eKey: { color: "gray", fontSize: 12, fontWeight: "600", textAlign: "left", marginBottom: 10 },  eValue: { color: "black", fontSize: 14, fontWeight: "600", textAlign: "left" },  description: { color: "white", fontSize: 14, fontWeight: "500", textAlign: "left" }});export default PetDetailList;