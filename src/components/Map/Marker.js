import React, { Component } from "react";import { StyleSheet, Text, View } from "react-native";import MapView from "react-native-maps";import Icon from "react-native-vector-icons/MaterialIcons";import Spinner from "../../components/Common/Spinner";class Marker extends Component {  constructor(props) {    super(props);    this.markers = {};  }  componentDidUpdate(prevProps) {    if (prevProps.focusedMarkerID !== this.props.focusedMarkerID || prevProps.focusedOrg !== this.props.focusedOrg) {      this.updateCallout();    }  }  updateCallout() {    if (this.props.calloutVisible) {      this.markers[this.props.focusedMarkerID].showCallout();    }  }  render() {    let { geoMarker } = this.props;    let [latitude, longitude] = geoMarker.location;    console.log("focusedOrg", this.props.focusedOrg);    return (      <MapView.Marker        key={`markersInSearchArea-${geoMarker.key}`}        ref={ref => (this.markers[geoMarker.key] = ref)}        coordinate={{          latitude,          longitude        }}        identifier={geoMarker.key.toString()}        onPress={() => this.props.onMarkerPress(geoMarker)}      >        <View style={styles.markerCircle}>          <Icon name="pets" size={20} color={"white"} type="materialicons" />        </View>        {this.props.focusedOrg ? (          <MapView.Callout style={styles.calloutContainer}>            <Text>Name: {this.props.focusedOrg.name||'null'}</Text>          </MapView.Callout>        ) : (          <MapView.Callout style={styles.calloutContainer}>            <Spinner size={"large"} color={"#000000"} />          </MapView.Callout>        )}      </MapView.Marker>    );  }}const styles = StyleSheet.create({  markerCircle: {    height: 25,    width: 25,    borderRadius: 5,    overflow: "hidden",    backgroundColor: "rgba(0,122,255,0.1)",    borderWidth: 1,    borderColor: "white",    alignItems: "center",    justifyContent: "center"  },  calloutContainer: {    width: 200,    height: 100,    padding: 10,    backgroundColor: "white",    borderRadius: 5  }});Marker.defaultProps = {  calloutVisible: false};export default Marker;