import React, { Component } from "react";import { Animated, Dimensions, Easing, Image, StyleSheet, Text, View } from "react-native";import { Button } from "react-native-elements";const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class ProfileView extends Component {  state = {    focusedPetIndex: -1,    elementAnimated: new Animated.Value(300)  };  startElementBounce = Animated.timing(this.state.elementAnimated, {    toValue: 300,    easing: Easing.linear  });  componentDidUpdate(prevProps, prevState) {    if (this.props.flag !== prevProps.flag) {      this.startElementBounce.start(this.state.elementAnimated.setValue(0));    }  }  _renderBlock = arr => {    if (arr.length) {      return arr.map(item => <View>{item.key}</View>);    }  };  render() {    let {      name,      pictures,      size,      age,      sex,      color,      mix,      sizeCurrent,      sizeUOM,      breed,      birthdate,      adoptionFee,      descriptionPlain,      status    } = this.props.petObj;    //let data = [{ Availability: [{ Status: status }, { Fee: adoptionFee }] }];    let colorFlag = this.props.colorIndex % 2;    const fadeBounce = this.state.elementAnimated.interpolate({      inputRange: [0, 300],      outputRange: [0, 1]    });    const elementMoveLeft = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, -50, 0]    });    const elementMoveRight = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, 50, 0]    });    const elementMoveUp = this.state.elementAnimated.interpolate({      inputRange: [0, 300],      outputRange: [ -100, 0]    });    const elementMoveDown = this.state.elementAnimated.interpolate({      inputRange: [0, 300],      outputRange: [50, 0]    });    return (      <View style={{ flex: 1, flexDirection: "column", paddingHorizontal: 20, paddingVertical: 20 }}>        <View style={{ flex: 1, marginVertical: 0, top: -20 }}>          <Animated.Text style={[{ color: "white", fontSize: 24, fontWeight: "600" },{opacity: fadeBounce, transform: [{ translateY: elementMoveUp }]}]}>{name}</Animated.Text>          <Animated.Text style={{opacity: fadeBounce, transform: [{ translateY: elementMoveDown }]}}>            {sex && <Text>{sex}</Text>}            {age && <Text> | {age}</Text>}            {size && <Text> | {size}</Text>}          </Animated.Text>        </View>        {/*<View style={{flex:1}}>          <Animated.View            style={[              { shadowColor: "black", borderRadius: 5, top: 64, zIndex: 2, height: 200, opacity: 1 },              { transform: [{ scale: 1 }] }            ]}          >            Profile            {focusedPet.pictures.length > 0 && <Image style={{height:300,width:SCREEN_WIDTH}} source={{ uri: focusedPet.pictures[0].fullsizeUrl }} />}            <Carousel              layout={"stack"}              ref={ref => (this._carouselProfile = ref)}              data={this.props.focusedPet.pictures || []}              renderItem={this.renderProfileItem}              sliderWidth={SCREEN_WIDTH} //carousel width              itemWidth={300}              hasParallaxImages={true}              lockScrollWhileSnapping              inactiveSlideScale={1}              inactiveSlideOpacity={1}              initialNumToRender={0}              onScroll={() =>                this.setState({                  focusedProfileImageIndex: this._carouselProfile.currentIndex                })              }            />          </Animated.View>        </View>*/}        {/*<View style={{ flex: 1, justifyContent: "space-around" }}>          {pictures &&            pictures.length > 0 &&            pictures.map(pic => (              <Image                key={pic.largeUrl}                source={{ uri: pic.fullsizeUrl }}                style={{ flex: 1, alignSelf: "center", height: 300, width: 300, marginVertical: 10 }}              />            ))}        </View>*/}        {/*<View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Status </Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>                {status || "N/A"}              </Animated.Text>            </View>          </View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Fee </Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>                {adoptionFee || "N/A"}              </Animated.Text>            </View>          </View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Birthday </Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>                {birthdate || "N/A"}              </Animated.Text>            </View>          </View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Weight </Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>                {Number(sizeCurrent) > 0 && sizeUOM ? `${sizeCurrent} ${sizeUOM}` : "N/A"}              </Animated.Text>            </View>          </View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Mix </Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveLeft }] }]}>                {mix || "N/A"}              </Animated.Text>            </View>          </View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Breed</Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>                {breed || "N/A"}              </Animated.Text>            </View>          </View>          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey, { color: this.props.themeColor }]}>Color </Text>              <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>                {color || "N/A"}              </Animated.Text>            </View>          </View>        </View>*/}        <View style={{ flex: 1, flexDirection: "row", marginVertical: 10, justifyContent: "center", alignItems: "center" }}>          <Button            /*icon={           <View style={{ height: 60, width: 60 }}>           <Check />           </View>           }*/            title={"Details"}            onPress={() => this.props.navigation.navigate("mapDetail", { petObj: this.props.petObj })}          />        </View>      </View>    );  }  renderProfileItem = ({ item, index }) => {    const { fullsizeUrl } = item;    return (      <View        style={{          flexGrow: 1,          //borderRadius: 10,          overflow: "hidden"        }}      >        <Image          source={{ uri: fullsizeUrl }}          style={{            flexGrow: 1,            height: "100%",            width: "100%",            position: "absolute"          }}        />      </View>    );  };}const styles = StyleSheet.create({  row: { flexDirection: "row", marginVertical: 10, justifyContent: "space-between" },  eContainer: {    flex: 1,    flexDirection: "row",    //overflow: "hidden",    marginHorizontal: 10,    paddingVertical: 10,    borderRadius: 5    //backgroundColor:'red',  },  eKey: { flex: 1, fontSize: 12, fontWeight: "800", textAlign: "left", marginBottom: 0 },  eValue: { flex: 2, color: "black", fontSize: 14, fontWeight: "500", textAlign: "left", marginRight: 0 },  description: { color: "white", fontSize: 14, fontWeight: "500", textAlign: "left" }});export default ProfileView;