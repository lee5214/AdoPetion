import React, { Component } from "react";import { Animated, Button, Dimensions, Image, PanResponder, StyleSheet, Text, View } from "react-native";import Carousel from "react-native-snap-carousel";import { Overlay } from "react-native-elements";const SCREEN_WIDTH = Dimensions.get("window").width;class MapCarousel extends Component {  constructor(props) {    super(props);    this.state = {      currentIndex: null,      //petData: [],      orgData: null,      overlayVisible: false,      //pan:new Animated.ValueXY()    };    this._y = 0;    this._animation = new Animated.Value(0);    this._animation.addListener(({ value }) => {      this._y = value;    })    this._panResponder = PanResponder.create({      onStartShouldSetPanResponder: () => true,      onMoveShouldSetPanResponder: () => true,      onPanResponderMove: Animated.event([        null,        {          dy: this._animation,        },      ]),      onPanResponderRelease: (e, gestureState) => {        if (gestureState.dy > 100) {          Animated.timing(this._animation, {            toValue: 300,            duration: 200,          }).start();          this._animation.setOffset(300);        } else {          this._animation.setOffset(0);          Animated.timing(this._animation, {            toValue: 0,            duration: 200,          }).start();        }      },    })  }  // noinspection JSUnusedGlobalSymbols  // static getDerivedStateFromProps(props, state) {  //   if (  //     props.petsByOrg.list[props.focusedOrgID]  //   ) {  //     let dataObj = props.petsByOrg.list[props.focusedOrgID];  //     let tempArr = Object.keys(dataObj).map(petID => dataObj[petID]);  //     return { petData: tempArr };  //   }  //   return null;  // }  componentDidMount() {    console.log("mounted");  }  renderItem = ({ item, index }) => {    if (this.props.itemType === "orgs") {      const { name, orgID } = item;      return (        <View style={styles.slide}>          <Text style={styles.title}>{name}</Text>          <Button            title={"Paw!"}            onPress={() => {              this.props.onPanItemPress(orgID);            }}          />        </View>      );    } else if (this.props.itemType === "pets") {      const { name, orgID, pictures } = item;      return (        <View style={styles.slide} {...this._panResponder.panHandlers}>          <Image            source={{ uri: pictures[0].large.url }}            style={styles.slideImage}          />          <View style={{ backgroundColor: "white", opacity: 0.6 }}>            <Text style={styles.slideTitle}>{name}</Text>          </View>          <Button            title={"test"}            onPress={() => this.setState({ overlayVisible: true })}          />        </View>      );    }  };  render() {    const { orgsDetailList } = this.props;    return (      <View        style={{          //position: "absolute",          bottom: 0,          alignSelf: "center",        }}      >          <Overlay            style={{position:'absolute'}}            isVisible={true}//{this.state.overlayVisible}            windowBackgroundColor="rgba(255, 255, 255, .5)"            overlayBackgroundColor="red"            width="auto"            height="auto"          >            <Text>ahahahaha</Text>          </Overlay>        <View          style={{            //height: 300,            //backgroundColor: "pink",            flexDirection: "column",            bottom: 0,            alignSelf: "stretch"          }}        >          {orgsDetailList.newAdded && (            <View              style={{                backgroundColor: "white",                margin: 10              }}            >              <Text style={{ margin: 10, fontSize: 14, fontWeight: "bold" }}>                {orgsDetailList.list[orgsDetailList.newAdded].name}              </Text>            </View>          )}          <Carousel            layout={"default"}            ref={c => {              this._carousel = c;            }}            containerCustomStyle={styles.carouselContainer}            data={this.props.petsForCarousel} //{this.state.petData}            renderItem={this.renderItem}            sliderWidth={SCREEN_WIDTH} //carousel width            itemWidth={SCREEN_WIDTH * 0.7}            firstItem={0}            slideStyle={{ flex: 1 }}          />        </View>      </View>    );  }}styles = StyleSheet.create({  carouselContainer: {    //height:300,    //backgroundColor: "red"  },  slide: {    flexGrow: 1,    height: 200,    marginBottom: 10,    backgroundColor: "white"  },  slideImage: {    flexGrow: 1,    height: "100%",    width: "100%",    position: "absolute",    top: 0,    left: 0  },  slideTitle: {    fontSize: 16,    padding: 6,    textAlign: "center"  }});export default MapCarousel;