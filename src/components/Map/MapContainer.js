import React, { Component } from "react";import { MapView } from "expo";import mapDarkStyle from "../../assets/mapDarkStyle";import Marker from "../../components/Map/Marker";class MapContainer extends Component {  constructor(props) {    super(props);    this.state = {      focusedMarkerID: null    };  }  // static getDerivedStateFromProps(nextProps, preProps) {  //   if (nextProps.orgsDetailList) {  //     console.log("nextProps");  //     return { calloutDetailList: nextProps.orgsDetailList };  //   }  // }  // componentWillReceiveProps(nextProps) {  //   if (nextProps.orgsDetailList) {  //     console.log("cWillRecieveProps: ", Object.keys(nextProps.orgsDetailList).map(obj=>{return obj}));  //     this.setState({ calloutDetailList: nextProps.orgsDetailList });  //   }  // }  // shouldComponentUpdate(nextProps,nextState){  //   console.log('shouldcomponentupdate')  //   return nextProps.orgsDetailList != this.state.calloutDetailList  // }  /*  * @param  */  onMarkerPress = markerKey => {    console.log("button onpressed");    this.props.fetchOrgDetail(markerKey);    this.focusMarker(markerKey);  };  // componentWillUpdate() {  //   Object.keys(this.markersRef).map(ref => {  //     if (this.props.orgsDetailList[ref]) {  //       this.markersRef[ref].showCallout();  //     }  //   });  //   // if(this.props.orgsDetailList[this.props.marker.key]) {  //   //   this.markersRef[this.props.marker.key].showCallout ()  //   // }  // }  focusMarker = markerKey => {    this.setState({ focusedMarkerID: markerKey });  };  render() {    console.log("render");    let {      markersList,      region,      radius,      orgsDetailList,      onRegionChangeComplete    } = this.props;    return (      <MapView        style={styles.mapView}        // showsMyLocationButton={true}        //loadingEnabled={true}        //showsPointsOfInterest={true}        minZoomLevel={4}        customMapStyle={mapDarkStyle}        provider={MapView.PROVIDER_GOOGLE}        region={region}        /*initialRegion={{          longitude: -100,          latitude: 37,          longitudeDelta: 0.04,          latitudeDelta: 0.09        }}*/        onRegionChange={onRegionChangeComplete}      >        <MapView.Circle          center={{            latitude: region.latitude,            longitude: region.longitude          }}          radius={1000 * radius} //in meters          fillColor={"rgba(114,255,250,0.5)"}          strokeColor={"transparent"}          geodesic={true}        />        {/*<Markers markersList={markersList} orgsDetailList={orgsDetailList} />*/}        {this.props.children}        {markersList.map(marker => {          let calloutVisible = false;          if(marker.key===this.state.focusedMarkerID){            calloutVisible=true;          }          return (            <Marker              key={`marker-${marker.key}`}              marker={marker}              orgsDetailList={this.props.orgsDetailList}              onMarkerPress={this.onMarkerPress}              calloutVisible={calloutVisible}            />          );        })}      </MapView>    );  }}const styles = {  mapView: {    //zIndex: -1,    flex: 1,    justifyContent: "center",    alignItems: "center"  },  markerPoint: {    height: 20,    width: 20,    borderWidth: 3,    borderColor: "white",    borderRadius: 10,    overflow: "hidden",    backgroundColor: "#007AFF"  },};export default MapContainer;