import React, { Component } from "react";import { MapView } from "expo";import { Text, View } from "react-native";import mapDarkStyle from "../../assets/mapDarkStyle";import Icon from "react-native-vector-icons/MaterialIcons";class MapContainer extends Component {  state = {    currentCallOut: null,  };  // static getDerivedStateFromProps(nextProps, preProps) {  //   if (nextProps.orgsDetailList) {  //     console.log("nextProps");  //     return { calloutDetailList: nextProps.orgsDetailList };  //   }  // }  // componentWillReceiveProps(nextProps) {  //   if (nextProps.orgsDetailList) {  //     console.log("cWillRecieveProps: ", Object.keys(nextProps.orgsDetailList).map(obj=>{return obj}));  //     this.setState({ calloutDetailList: nextProps.orgsDetailList });  //   }  // }  // shouldComponentUpdate(nextProps,nextState){  //   console.log('shouldcomponentupdate')  //   return nextProps.orgsDetailList != this.state.calloutDetailList  // }  /*  * @param  */  onMarkerPress = markerKey => {    console.log("button onpressed");    this.props.navigation.navigate('deck')    this.props.fetchOrgDetail(markerKey);  };  render() {    //console.log("MapContainer dataLoading", this.state.calloutDetailList);    let { markersList, region, radius, onRegionChangeComplete } = this.props;    return (      <MapView        style={styles.mapView}        // showsMyLocationButton={true}        loadingEnabled={true}        showsPointsOfInterest={true}        minZoomLevel={4}        customMapStyle={mapDarkStyle}        provider={MapView.PROVIDER_GOOGLE}        region={region}        initialRegion={{          longitude: -100,          latitude: 37,          longitudeDelta: 0.04,          latitudeDelta: 0.09        }}        onRegionChangeComplete={onRegionChangeComplete}        onMarkerPress={console.log("test")}      >        <MapView.Circle          center={{            latitude: region.latitude,            longitude: region.longitude          }}          radius={1000 * radius} //in meters          fillColor={"rgba(114,255,250,0.5)"}          strokeColor={"transparent"}          geodesic={true}        />        {markersList.map(marker => {          let [latitude, longitude] = marker.location;          // if (this.state.calloutDetailList[marker.key]) {          //   console.log("yeah yeah yeah");          //   return (          //     <Text key={`markersInSearchArea-${marker.key}`}>          //       Yeah Yeah Yeah          //     </Text>          //   );          // }          return (            <MapView.Marker              key={`markersInSearchArea-${marker.key}`}              coordinate={{                latitude,                longitude              }}              identifier={marker.key.toString()}              onPress={() => this.onMarkerPress(marker.key)}            >              <View style={styles.markerCircle}>                <Icon                  name="pets"                  size={20}                  color={"white"}                  type="materialicons"                />              </View>              <MapView.Callout>                <Text>{this.props.orgsDetailList[marker.key]&&this.props.orgsDetailList[marker.key].city}</Text>              </MapView.Callout>              {/*{this.state.calloutDetailList[marker.key] ? (*/}              {/*<MapView.Callout>*/}                {/*<Text>{this.state.calloutDetailList[marker.key].city}</Text>*/}              {/*</MapView.Callout>*/}            {/*) : (*/}              {/*<MapView.Callout>*/}                {/*<Button*/}                  {/*title={"fetch"}*/}                  {/*onPress={() => this.onMarkerPress(marker.key)}*/}                {/*/>*/}                {/*<Text>loading</Text>*/}              {/*</MapView.Callout>*/}            {/*)}*/}              {/*<MapView.Callout>*/}              {/*<View style={styles.calloutContainer}>*/}              {/*<Text>--{marker.key}--</Text>*/}              {/*{this.state.calloutDetailList[marker.key] && (*/}              {/*<Text>{this.props.orgsDetailList[marker.key].city}</Text>*/}              {/*)}*/}              {/*</View>*/}              {/*</MapView.Callout>*/}            </MapView.Marker>          );        })}        {this.props.children}      </MapView>    );  }}const styles = {  mapView: {    zIndex: -1,    flex: 1,    justifyContent: "center",    alignItems: "center"  },  markerCircle: {    height: 25,    width: 25,    borderRadius: 5,    overflow: "hidden",    backgroundColor: "rgba(0,122,255,0.1)",    borderWidth: 1,    borderColor: "white",    alignItems: "center",    justifyContent: "center"  },  markerPoint: {    height: 20,    width: 20,    borderWidth: 3,    borderColor: "white",    borderRadius: 10,    overflow: "hidden",    backgroundColor: "#007AFF"  },  calloutContainer: {    backgroundColor: "red",    height: 50,    width: 100  },  spinnerContainer: {    width: 400,    height: 400,    left: 0,    right: 0,    top: 100,    justifyContent: "center",    backgroundColor: "transparent"  }};export default MapContainer;