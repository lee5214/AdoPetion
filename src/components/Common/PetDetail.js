import React, { Component } from "react";import { connect } from "react-redux";import { Animated, Dimensions, Image, Modal, ScrollView, StyleSheet, Text, TouchableOpacity, View } from "react-native";import * as actions from "../../actions";import Ionicons from "react-native-vector-icons/Ionicons";import MaterialIcons from "react-native-vector-icons/MaterialIcons";import ImageViewer from "react-native-image-zoom-viewer";import { petDetailFieldList } from "../../../config/setting/defaultValues";const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");const SCREEN_RADIO = SCREEN_HEIGHT / SCREEN_WIDTH;class PetDetail extends Component {  static navigationOptions = ({navigation}) => ({    title:'Explore Result',    headerLeft: (      <MaterialIcons        name="keyboard-arrow-left"        size={30}        type="materialicons"        style={{ paddingLeft: 20 }}        onPress={() => {          navigation.goBack()        }}      />    )  });  state = {    isLiked: false,    isViewerOn: false  };  static getDerivedStateFromProps(props, state) {    // check if current pet is liked    //const data = props.petObj.animalID; //props.navigation.getParam("petObj");    //if(props.likedPets.filter(pet=>pet.animalID===props.petObj.animalID).length>0){    if (props.likedPets && _.findIndex(props.likedPets, { animalID: props.petObj.animalID }) >= 0) {      return {        isLiked: true      };    } else {      return {        isLiked: false      };    }  }  _renderBlock = arr => {    if (arr.length) {      return arr.map(item => <View>{item.key}</View>);    }  };  List = () => {    //let data = this.props.petObj;    return petDetailFieldList.map(      elePair =>        this.props.petObj[elePair[0]] &&        this.props.petObj[elePair[0]] !== "" && (          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey]}>{elePair[1].toUpperCase()} </Text>              <Text style={[styles.eValue]}>{this.props.petObj[elePair[0]] || "N/A"}</Text>            </View>          </View>        )    );  };  toggleLiked = () => {    if (!this.state.isLiked) {      this.props.likePet(this.props.petObj);    } else {      this.props.unlikePet(this.props.petObj);    }  };  render() {    //console.log('yo',this.props.likedPets.filter(pet=>pet.animalID===this.props.petObj.animalID))    let {      name,      pictures,      animalID,      size,      age,      sex,      color,      mix,      sizeCurrent,      sizeUOM,      breed,      birthdate,      adoptionFee,      descriptionPlain,      status    } = this.props.petObj;    const images = pictures.map(pic => {      return { url: pic.fullsizeUrl };    });    return (      <Animated.View style={{ flex: 1 ,justifyContent:'center',alignItems:'center'}}>        <Modal visible={this.state.isViewerOn} transparent={true}>          <TouchableOpacity            style={{ zIndex: 999, position: "absolute", width: 50, height: 50, top: 100, right: 20 }}            onPress={() => this.setState({ isViewerOn: false })}          >            <Ionicons              name="ios-close"              size={40}              //type="materialicons"              style={{ color:'white' }}            />          </TouchableOpacity>          <ImageViewer imageUrls={images} onSwipeDown={() => this.setState({ isViewerOn: false })} />        </Modal>        {/*back bar*/}        <View          style={{            shadowColor: "black",            shadowOffset: { height: 0, width: 0 },            shadowOpacity: 0.2,            shadowRadius: 10,            position: "absolute",            flex: 1,            backgroundColor: "white",            height: SCREEN_HEIGHT,            width: SCREEN_WIDTH * 0.9,            left: SCREEN_WIDTH * 0.05          }}        />        {/*<View style={{position:'absolute',top:0,right:0,backgroundColor:'white',height:SCREEN_HEIGHT,width:SCREEN_WIDTH*.9,left:SCREEN_WIDTH*.05}}/>*/}        <Text style={{ fontSize: 50, fontWeight: "700",alignSelf:'flex-start' }}>Pet Detail</Text>        <ScrollView style={{ flex: 1, flexDirection: "column",marginBottom:40 }}>          <View style={{ position: "absolute", height: "100%" }} />          {pictures &&            pictures.length > 0 &&            pictures.map(pic => (              <TouchableOpacity key={animalID} activeOpacity={1} onPress={() => this.setState({ isViewerOn: true })}>                <Image                  source={{ uri: pic.fullsizeUrl }}                  style={{ flex: 1, width: SCREEN_WIDTH*.9, height: SCREEN_WIDTH - 100, marginVertical: 2 }}                />              </TouchableOpacity>            ))}          <View style={{ flex: 1, flexDirection: "row", width: SCREEN_WIDTH * 0.9 }}>            <View style={{ flex: 1, padding: 5 }}>              <MaterialIcons.Button                onPress={() => {                  this.toggleLiked();                }}                name={this.state.isLiked ? "favorite" : "favorite-border"}                backgroundColor={"#ebebeb"}                color={"red"}              >                <Text style={{color: "#545454", fontWeight: "500", fontSize: 15 }}>{this.state.isLiked ? "Following" : "Follow Me"}</Text>              </MaterialIcons.Button>            </View>            <View style={{ flex: 1, padding: 5 }}>              <MaterialIcons.Button                onPress={()=>this.props.toOrgDetail(this.props.petObj.orgID)}                name={"store-mall-directory"}                backgroundColor={"#ebebeb"}                color={"black"}              >                <Text style={{ color: "#545454", fontWeight: "500", fontSize: 15 }}>Organization</Text>              </MaterialIcons.Button>            </View>          </View>          <View style={{ flex: 1, width: SCREEN_WIDTH * 0.9 }}>            <this.List />            <View style={[styles.eContainer, { flexDirection: "column" }]}>              <Text style={[styles.eKey]}>DESCRIPTION</Text>              <Text style={[styles.eValue, { textAlign: "left" }]}>{descriptionPlain}</Text>            </View>          </View>        </ScrollView>      </Animated.View>    );  }}const styles = StyleSheet.create({  row: { flexDirection: "row", marginVertical: 10, justifyContent: "space-between" },  eContainer: {    flex: 1,    flexDirection: "column",    marginHorizontal: 10,    paddingVertical: 10,    borderRadius: 5,    borderBottomWidth: 1,    borderBottomColor: "#696969"  },  eKey: { flex: 1, color: "#a5a5a5", fontSize: 14, fontWeight: "700", textAlign: "left", marginBottom: 10 },  eValue: { flex: 1, color: "#565656", fontSize: 13, fontWeight: "600", textAlign: "right", marginRight: 0 },  description: { color: "white", fontSize: 12, fontWeight: "500", textAlign: "left" }});function mapStateToProps(state) {  return {    likedPets: state.likedPets  };}export default connect(mapStateToProps, actions)(PetDetail);