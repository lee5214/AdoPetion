import React, { Component } from "react";import { connect } from 'react-redux';import { Animated, Dimensions, Easing, Image, StyleSheet, Text, View } from "react-native";import * as actions from "../../actions";import Icon from 'react-native-vector-icons/MaterialIcons';const EleList = ["status", "adoptionFee", "sex", "age", "size", "birthdate", "weight", "mix", "color", "breed"];const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class PetDetailList extends Component {  state = {    focusedPetIndex: -1,    elementAnimated: new Animated.Value(0)  };  startElementBounce = Animated.timing(this.state.elementAnimated, {    toValue: 300,    easing: Easing.linear  });  componentDidUpdate(prevProps, prevState) {    if (this.props.flag !== prevProps.flag) {      this.startElementBounce.start(this.state.elementAnimated.setValue(0));    }  }  _renderBlock = arr => {    if (arr.length) {      return arr.map(item => <View>{item.key}</View>);    }  };  List = () => {    let data = this.props.petObj;    return EleList.map(      eleName =>        data[eleName] && (          <View style={styles.row}>            <View style={[styles.eContainer]}>              <Text style={[styles.eKey]}>{eleName} </Text>              <Text style={[styles.eValue]}>{this.props.petObj[eleName] || "N/A"}</Text>            </View>          </View>        )    );  };  render() {    let {      name,      pictures,      size,      age,      sex,      color,      mix,      sizeCurrent,      sizeUOM,      breed,      birthdate,      adoptionFee,      descriptionPlain,      status    } = this.props.petObj;    //let data = [{ Availability: [{ Status: status }, { Fee: adoptionFee }] }];    let colorFlag = this.props.colorIndex % 2;    const fadeBounce = this.state.elementAnimated.interpolate({      inputRange: [0, 160, 180, 300],      outputRange: [1, 0, 0, 1]    });    const elementMoveLeft = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, -50, 0]    });    const elementMoveRight = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, 50, 0]    });    const elementMoveUp = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, -50, 0]    });    const elementMoveDown = this.state.elementAnimated.interpolate({      inputRange: [0, 140, 300],      outputRange: [0, 50, 0]    });    return (      <View style={{ flex: 1, paddingHorizontal: 25, paddingVertical: 10 }}>        <View>          {pictures &&            pictures.length > 0 &&            pictures.map(pic => <Image source={{ uri: pic.fullsizeUrl }} style={{ flex: 1, height: 200, marginVertical: 20 }} />)}        </View>        <View>          <Icon            name="favorite-border"            //color={COLORS[colorIndex]}            size={30}            type="materialicons"            onPress={() => {              console.log("like pet");              this.props.likePet(this.props.petObj);            }}          />        </View>        <View style={{ flex: 1 }}>          <this.List />        </View>        <View style={[styles.eContainer,{flexDirection:'column'}]}>          <Text style={[styles.eKey]}>Description</Text>          <Text style={[styles.eValue,{textAlign:'left'}]}>{descriptionPlain}</Text>        </View>        {/*<Text>Availability</Text>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Status </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>              {status || "N/A"}            </Animated.Text>          </View>        </View>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Fee </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>              {adoptionFee || "N/A"}            </Animated.Text>          </View>        </View>        <Text>Basic</Text>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Age </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveLeft }] }]}>              {age || "N/A"}            </Animated.Text>          </View>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Sex </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>              {sex}            </Animated.Text>          </View>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Size </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>              {size || "N/A"}            </Animated.Text>          </View>        </View>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Birthday </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveRight }] }]}>              {birthdate || "N/A"}            </Animated.Text>          </View>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Weight </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>              {Number(sizeCurrent) > 0 && sizeUOM ? `${sizeCurrent} ${sizeUOM}` : "N/A"}            </Animated.Text>          </View>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Mix </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateX: elementMoveLeft }] }]}>              {mix || "N/A"}            </Animated.Text>          </View>        </View>        <Text>Extra</Text>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Breed</Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>              {breed || "N/A"}            </Animated.Text>          </View>        </View>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Color </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveDown }] }]}>              {color || "N/A"}            </Animated.Text>          </View>        </View>        <Text>Some words</Text>        <View style={styles.row}>          <View style={[styles.eContainer]}>            <Text style={[styles.eKey, { color: this.props.themeColor }]}>Description </Text>            <Animated.Text style={[styles.eValue, { opacity: fadeBounce, transform: [{ translateY: elementMoveUp }] }]}>              {descriptionPlain || "N/A"}            </Animated.Text>          </View>        </View>*/}      </View>    );  }}const styles = StyleSheet.create({  row: { flexDirection: "row", marginVertical: 10, justifyContent: "space-between" },  eContainer: {    flex: 1,    flexDirection: "row",    //overflow: "hidden",    marginHorizontal: 10,    paddingVertical: 10,    borderRadius: 5    //backgroundColor:'red',  },  eKey: { flex: 1, fontSize: 12, fontWeight: "800", textAlign: "left", marginBottom: 10 },  eValue: { flex: 1, color: "black", fontSize: 14, fontWeight: "500", textAlign: "right", marginRight: 0 },  description: { color: "white", fontSize: 14, fontWeight: "500", textAlign: "left" }});export default connect(null, actions)(PetDetailList);