import React, { Component } from "react";import _ from "lodash";import { connect } from "react-redux";import { Animated, Dimensions, Easing, Image, PanResponder, ScrollView, StyleSheet, Text, View } from "react-native";import { BlurView, LinearGradient } from "expo";import * as actions from "../../actions/index";import Icon from "react-native-vector-icons/MaterialIcons";import GeoFire from "geofire";import { firedb } from "../../modules/firebase";import MapContainer from "../../components/Map/MapContainer";import { defaultRegion } from "../../../config/setting/defaultValues";import ModalSpinner from "../../components/Common/ModalSpinner";import SearchArea from "../../components/Map/SearchArea";import Carousel from "react-native-snap-carousel";import Spinner from "../../components/Common/Spinner";let { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get("window");SCREEN_HEIGHT -= 0;const INTRO_CAROUSEL_HEIGHT = 250;const TAB_HEIGHT = 50;const PROFILE_MIN_Y = INTRO_CAROUSEL_HEIGHT + 50;const PROFILE_MAX_Y = SCREEN_HEIGHT - PROFILE_MIN_Y;const PROFILE_INTRO_OFFSET = PROFILE_MIN_Y - INTRO_CAROUSEL_HEIGHT;const AnimatedBlurView = Animated.createAnimatedComponent(BlurView);const COLORS = ["#F38181", "#66CCCC", "#6094EA", "#FCE38A", "#FF7676", "#3BB2B8", "#f085ed", "#57CA85", "#66CCCC"];//const GRADIENTS = [["#F38181", "#66CCCC"], ["#66CCCC", "#FCE38A"], ["#FCE38A", "#FF7676"], ["#c8e6b0", "#3BB2B8"],// ["#F02FC2", "#6094EA"], ["#5B247A", "#1BCEDF"], ["#184E68", "#57CA85"]];const AnimatedIcon = Animated.createAnimatedComponent(Icon);const THEME = { mainColor: "pink" };class MapScreen extends Component {  // noinspection JSUnusedGlobalSymbols 1  static navigationOptions = {    drawerLockMode: "locked-open",    title: "Map",    //header: null,    tabBarIcon: ({ tintColor }) => {      return <Icon name="place" color={tintColor} size={20} type="materialicons" />;    },    drawerLabel: "MapScreen"  };  constructor(props) {    super(props);    this.state = {      region: defaultRegion,      radius: 10,      dataLoading: false,      orgsSearchedID: [],      petsForCarousel: [], //DEFAULT_SAMPLE, //[]      focusedOrgID: -1,      focusedIntroPetIndex: 0,      focusedIntroPetIndexPrev: 0,      focusedProfileImageIndex: 0,      //these two only contain geo locations from firedb      geoMarkersCurrentSearchResults: {},      //geoMarkersAllSearchResultsSaved: {},      //animations      anime_bottomUIShowUp: new Animated.Value(0),      anime_profileSwipe: new Animated.Value(300),      anime_profileAfterSwipe: new Animated.Value(0),      anime_introCarouselSwipe: new Animated.Value(0),      anime_profileScrollDown: new Animated.Value(0),      anime_drawerOpen: new Animated.Value(0),      isScrolledUp: false,      isMapBlurEnabled: false,      petSwitchFlag: false,      drawerOpen: false    };    this.scrollOffset = 0;    this.anime_drawerOpen = Animated.timing(this.state.anime_drawerOpen, {      toValue: 300,      duration: 300,      easing: Easing.linear    });    this.anime_drawerOpen2 = Animated.timing(this.state.anime_drawerOpen, {      toValue: 0,      duration: 300,      easing: Easing.linear    });    this.anime_bottomUIShowUp = Animated.timing(this.state.anime_bottomUIShowUp, {      toValue: 300,      easing: Easing.linear    });    this.anime_introCarouselSwipe = Animated.timing(this.state.anime_introCarouselSwipe, {      toValue: 300,      easing: Easing.linear    });    this._panResponder = PanResponder.create({      onMoveShouldSetPanResponder: (evt, gestureState) => {        if (          (this.state.isScrolledUp && this.scrollOffset <= 0 && gestureState.dy > 10 && Math.abs(gestureState.dy) > Math.abs(gestureState.dx) * 4) ||          (!this.state.isScrolledUp && gestureState.dy <= 0 && Math.abs(gestureState.dy) > Math.abs(gestureState.dx) * 2)        ) {          return true;        }        return false;      },      onPanResponderGrant: (evt, gestureState) => {        this.setState({ isMapBlurEnabled: true });        this.state.anime_profileSwipe.extractOffset();      },      onPanResponderMove: (evt, gestureState) => {        this.state.anime_profileSwipe.setValue(gestureState.dy);      },      onPanResponderRelease: (evt, gestureState) => {        this.state.anime_profileSwipe.flattenOffset();        const { dy, moveY } = gestureState;        if (moveY > PROFILE_MAX_Y + 100) {          this.state.anime_profileAfterSwipe.setValue(0);          this.setState({ isScrolledUp: false, isMapBlurEnabled: false });          console.log("1");          Animated.timing(this.state.anime_profileSwipe, {            toValue: 300,            tension: 1          }).start();        } else if (moveY < PROFILE_MIN_Y) {          this.setState({ isScrolledUp: true, isMapBlurEnabled: true });          console.log("2");          Animated.parallel([            Animated.timing(this.state.anime_profileSwipe, {              toValue: 0            }),            Animated.timing(this.state.anime_profileAfterSwipe, {              toValue: 300,              delay: 500            })          ]).start();        } else if (dy <= 0) {          console.log("3");          this.setState({ isScrolledUp: true, isMapBlurEnabled: true });          Animated.parallel([            Animated.timing(this.state.anime_profileSwipe, {              toValue: 0            }),            Animated.timing(this.state.anime_profileAfterSwipe, {              toValue: 300,              delay: 500            })          ]).start();          //this.state.anime_profileSwipe.setValue(-PROFILE_MAX_Y)        } else if (dy > 0) {          console.log("4");          this.state.anime_profileAfterSwipe.setValue(0);          Animated.parallel([            Animated.timing(this.state.anime_profileSwipe, {              toValue: 300            }),            Animated.timing(this.state.anime_profileAfterSwipe, {              toValue: 0            })          ]).start(this.setState({ isScrolledUp: false, isMapBlurEnabled: false }));        }      }    });    this.markersHolder = {};    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 10    });    this.geoQuery.on("ready", () => {      this.setState({        geoMarkersCurrentSearchResults: this.markersHolder,        dataLoading: false      });    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      this.markersHolder[key] = { key, location, distance };    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      delete this.markersHolder[key];    });  }  componentDidMount() {    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({ region: { ...this.state.region, latitude, longitude } });    });  }  static getDerivedStateFromProps(props, state) {    if (props.orgsDetailList.newAdded && state.orgsSearchedID.indexOf(props.orgsDetailList.newAdded) < 0) {      return {        orgsSearchedID: [props.orgsDetailList.newAdded, ...state.orgsSearchedID]      };    }    if (props.petsByOrg.list[state.focusedOrgID]) {      let dataObj = props.petsByOrg.list[state.focusedOrgID];      let tempArr = Object.keys(dataObj).map(petID => dataObj[petID]);      return { petsForCarousel: tempArr };    }    if (_.get(props, "navigation.state.params.from") === "mapMain") {      console.log("mapMain");      return { drawerOpen: false };      //this.anime_drawerOpen2.start(this.state.anime_drawerOpen.setValue(300))    }    return null;  }  componentDidUpdate(prevProps, prevState, snapshot) {    if (this.state.focusedIntroPetIndex !== prevState.focusedIntroPetIndex) {      this.setState({ focusedIntroPetIndexPrev: prevState.focusedIntroPetIndex });      this.anime_introCarouselSwipe.start(this.state.anime_introCarouselSwipe.setValue(0));    }    if (this.state.drawerOpen === true && this.state.drawerOpen !== prevState.drawerOpen) {      this.props.navigation.openDrawer();      this.anime_drawerOpen.start(this.state.anime_drawerOpen.setValue(0));    }    if (this.state.drawerOpen === false && this.state.drawerOpen !== prevState.drawerOpen) {      this.props.navigation.closeDrawer();      this.anime_drawerOpen2.start(this.state.anime_drawerOpen.setValue(300));    }  }  radiusFitScreen = (longitudeDelta, latitude) => {    let zoom = Math.round(Math.log(360 / longitudeDelta) / Math.LN2);    let sPerPx = 10 * 156543.03392 * Math.cos(latitude * Math.PI / 180) / Math.pow(2, zoom);    this.setState({ radius: sPerPx });  };  updateRegionInScreen = region => {    if (this.timerForMap) {      clearTimeout(this.timerForMap);    }    this.timerForMap = setTimeout(() => {      this.setState({ region });    }, 100);  };  onSearchArea = (lat, lng, rad) => {    this.updateCriteria(lat, lng, rad);  };  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  setLoadingFalse = () => {    this.setState({ dataLoading: false });  };  markAnimateToCoord = markerData => {    let coordinate = {      latitude: markerData.location[0],      longitude: markerData.location[1]    };    this.mapContainer.map.animateToCoordinate(coordinate, 500);  };  onMapMarkPress = markerKey => {    this.setState({ focusedOrgID: markerKey, petsForCarousel: [] });    this.anime_bottomUIShowUp.start(this.state.anime_bottomUIShowUp.setValue(0));    this.props.fetchOrgDetail(markerKey);    this.props.fetchPetsByOrg(markerKey);  };  // setFocusedPetIndex = id => {  //   this.setState({ focusedIntroPetIndex: id });  // };  profileIconToggle = () => {    if (this.state.isScrolledUp === false) {      this.setState({ isScrolledUp: true, isMapBlurEnabled: true });      Animated.parallel([        Animated.timing(this.state.anime_profileSwipe, {          toValue: 0,          tension: 1        }),        Animated.timing(this.state.anime_profileAfterSwipe, {          toValue: 300,          duration: 500,          delay: 500        })      ]).start();    } else {      this.state.anime_profileAfterSwipe.setValue(0);      this._profileSV.scrollTo({ y: 0 });      Animated.parallel([        Animated.timing(this.state.anime_profileSwipe, {          toValue: 300,          tension: 1        }),        Animated.timing(this.state.anime_profileAfterSwipe, {          toValue: 0        })      ]).start(this.setState({ isScrolledUp: false, isMapBlurEnabled: false }));    }  };  render() {    //console.log(this.props.navigation.state);    const { orgsDetailList, petsByOrg } = this.props;    const { latitude, longitude, latitudeDelta, longitudeDelta } = this.state.region;    let focusedOrg = orgsDetailList.list[this.state.focusedOrgID] || {};    let focusedPet = this.state.petsForCarousel[this.state.focusedIntroPetIndex] || {};    const colorIndex = this.state.focusedIntroPetIndex % COLORS.length;    //const colorIndex = (this.state.focusedIntroPetIndex + 1) % GRADIENTS.length;    const introTextScroll = this.state.anime_introCarouselSwipe.interpolate({      inputRange: [0, 150, 300],      outputRange: [0, -120, 0],      extrapolate: "clamp"    });    const introFade = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 200, 300],      outputRange: [0, 0, 1],      extrapolate: "clamp"    });    const introTransX = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: [150, 0],      extrapolate: "clamp"    });    const profileFade = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 200, 300],      outputRange: [1, 0, 0],      extrapolate: "clamp"    });    const profileScale = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: [0.9, 1],      extrapolate: "clamp"    });    const profileImageScale = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: [1, 0.4],      extrapolate: "clamp"    });    const introProfileTransY = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: [-PROFILE_MAX_Y, 0],      extrapolate: "clamp"    });    const iconRotate = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: ["-180deg", "0deg"],      extrapolate: "clamp"    });    const introLineWidth = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: ["1%", "60%"],      extrapolate: "clamp"    });    const introCarouselTransY = this.state.anime_bottomUIShowUp.interpolate({      inputRange: [0, 300],      outputRange: [INTRO_CAROUSEL_HEIGHT, 0],      extrapolate: "clamp"    });    const introCarouselSwipeBorder = this.state.anime_introCarouselSwipe.interpolate({      inputRange: [0, 150, 300],      outputRange: ["0deg", "5deg", "0deg"],      extrapolate: "clamp"    });    const profileListColorChange = this.state.anime_introCarouselSwipe.interpolate({      inputRange: [0, 300],      outputRange: [COLORS[this.state.focusedIntroPetIndexPrev % COLORS.length], COLORS[colorIndex]],      //outputRange: [GRADIENTS[this.state.focusedIntroPetIndexPrev % GRADIENTS.length], GRADIENTS[colorIndex]],      extrapolate: "clamp"    });    const profileImageFadeWhileSwipe = this.state.anime_introCarouselSwipe.interpolate({      inputRange: [0, 300],      outputRange: [0, 1],      extrapolate: "clamp"    });    const profileShowUpValue = this.state.anime_bottomUIShowUp.interpolate({      inputRange: [0, 300],      outputRange: [SCREEN_HEIGHT, PROFILE_MAX_Y]      //outputRange: [-300, 0]    });    const blurBackgroundMap = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: [100, 0],      extrapolate: "clamp"    });    const profileDelayFadeIn = this.state.anime_profileAfterSwipe.interpolate({      inputRange: [0, 300],      outputRange: [0, 1],      extrapolate: "clamp"    });    const switchIconTranY = this.state.anime_profileSwipe.interpolate({      inputRange: [0, 300],      outputRange: [-30, -20],      extrapolate: "clamp"    });    const drawerScale = this.state.anime_drawerOpen.interpolate({      inputRange: [0, 300],      outputRange: [1, 0.7],      extrapolate: "clamp"    });    const drawerLeft = this.state.anime_drawerOpen.interpolate({      inputRange: [0, 300],      outputRange: [0, SCREEN_WIDTH * 0.7],      extrapolate: "clamp"    });    return (      <Animated.View style={{ overflow: "hidden", flex: 1, transform: [{ scale: drawerScale }, { translateX: drawerLeft }] }}>        {this.state.dataLoading && <ModalSpinner visible={this.state.dataLoading} transparent={true} animationType={"none"} setLoadingFalse={this.setLoadingFalse} />}        <MapContainer          ref={ref => (this.mapContainer = ref)}          geoMarkersCurrentSearchResults={this.state.geoMarkersCurrentSearchResults}          updateRegionInScreen={this.updateRegionInScreen}          onRegionChangeComplete={this.onRegionChangeComplete}          radius={this.state.radius}          orgsDetailList={this.props.orgsDetailList}          navigation={this.props.navigation}          onMapMarkPress={this.onMapMarkPress}        />        {/*search area button*/}        <Animated.View          style={{            position: "absolute",            width: 150,            left: (SCREEN_WIDTH - 150) / 2,            height: 50,            top: PROFILE_MAX_Y - 50, //(SCREEN_HEIGHT - 50) / 2,            zIndex: 10,            opacity: introFade          }}        >          <View style={{ position: "absolute", height: "80%", top: "10%", width: "100%", backgroundColor: "#3e3e3e" }} />          <SearchArea            leftOffset={SCREEN_WIDTH}            topOffset={PROFILE_MAX_Y}            setR10={() => this.setState({ radius: 10 })}            setR20={() => this.setState({ radius: 20 })}            radius={this.state.radius}            onSearchArea={() => this.onSearchArea(latitude, longitude, this.state.radius)}          />        </Animated.View>        {/*map blur element*/}        <AnimatedBlurView tint="default" intensity={blurBackgroundMap} style={[StyleSheet.absoluteFill, { display: this.state.isMapBlurEnabled ? "flex" : "none" }]} />        {/*burger button*/}        <View style={{ zIndex: 9999, position: "absolute", top: 44, flexDirection: "row" }}>          <Icon            style={{ position: "absolute", left: 20, zIndex: 1 }}            name="menu"            color={"white"}            size={30}            type="materialicons"            onPress={() => {              console.log("drawerOpen", true);              this.setState({ drawerOpen: true });              //this.anime_drawerOpen.start(this.state.anime_drawerOpen.setValue(0));              //this.props.navigation.toggleDrawer()//navigate("DrawerOpen");            }}          />          {/*<View style={{ flexGrow: 1 }}>            <Text style={{ textAlign: "center", color: "white" }}>              LatLng:{latitude.toFixed(2)}|{longitude.toFixed(2)}            </Text>            <Text style={{ textAlign: "center", color: "white" }}>              Delta:{latitudeDelta.toFixed(2)}|{longitudeDelta.toFixed(2)}            </Text>          </View>*/}        </View>        <Animated.View          style={{            zIndex: 100,            position: "absolute",            borderRadius: 10,            overflow: "hidden",            left: 0,            right: 0,            top: profileShowUpValue,            height: SCREEN_HEIGHT, //PROFILE_MIN_Y,            //backgroundColor: profileListColorChange, //COLORS[colorIndex],            transform: [{ translateY: introProfileTransY }]          }}          {...this._panResponder.panHandlers}        >          {/*color string*/}          <Animated.View style={{ zIndex: -1, position: "absolute", width: introLineWidth, height: "100%", left: "20%", backgroundColor: COLORS[this.state.focusedIntroPetIndex], opacity: 1 }} />          <Animated.View style={{ position: "absolute", width: "100%", height: "100%", backgroundColor: profileListColorChange, opacity: 1, flex: 1 }} />          <LinearGradient colors={["rgba(255,255,255,0.4)", "rgba(255,255,255,0.8)"]} start={[0, 0]} end={[1, 1]}>            {this.state.petsForCarousel.length > 0 && (              <View                style={{                  padding: 0,                  position: "absolute",                  right: 10,                  top: PROFILE_INTRO_OFFSET / 2,                  zIndex: 30                }}              >                <AnimatedIcon                  style={[styles.swipeIcon, { transform: [{ rotate: iconRotate }, { translateY: switchIconTranY }] }]}                  name="keyboard-arrow-up"                  color={"white"}                  size={30}                  type="materialicons"                  onPress={this.profileIconToggle}                />                <AnimatedIcon                  style={[styles.swipeIcon, { marginTop: 120 }, { transform: [{ translateY: switchIconTranY }] }]}                  name="favorite-border"                  color={"pink"}                  size={30}                  type="materialicons"                  onPress={() => {                    console.log("like pet");                    this.props.likePet(focusedPet);                  }}                />              </View>            )}            <ScrollView              ref={ref => (this._profileSV = ref)}              scrollEnabled={this.state.isScrolledUp}              scrollEventThrottle={16}              //contentContainerStyle={{padding:21}}              onScroll={event => {                this.scrollOffset = event.nativeEvent.contentOffset.y;              }}            >              {/* intro */}              <View style={{ flex: 1 }}>                <Animated.View                  style={{                    opacity: introFade,                    transform: [{ translateX: introTransX }]                  }}                >                  <View                    style={{                      marginTop: 0                    }}                  >                    {focusedOrg && (                      <Animated.Text                        ellipsizeMode={"head"}                        numberOfLine={1}                        style={{                          flex: 1,                          color: "white",                          width: SCREEN_WIDTH - 50,                          marginHorizontal: 10,                          top: 5,                          //marginTop: 10,                          fontSize: 16,                          fontWeight: "600"                        }}                      >                        {focusedOrg.name}                      </Animated.Text>                    )}                    {focusedPet && (                      <Animated.Text                        numberOfLine={1}                        style={{                          //position:'absolute',                          //top:35,                          color: "white",                          marginHorizontal: 10,                          fontSize: 20,                          fontWeight: "800",                          transform: [{ translateX: introTextScroll }]                        }}                      >                        {focusedPet.name}                      </Animated.Text>                    )}                  </View>                </Animated.View>              </View>              <Animated.View style={[{ zIndex:2,height: SCREEN_HEIGHT*.8,opacity:profileFade }, { transform: [{ scale: profileImageScale }] }]}>              <Carousel                //layout={"stack"}                ref={ref => (this._carouselIntro2 = ref)}                data={this.state.petsForCarousel}                renderItem={this.renderIntroItem2}                sliderWidth={SCREEN_WIDTH} //carousel width                itemWidth={SCREEN_WIDTH * .9}                lockScrollWhileSnapping                inactiveSlideScale={0.9}                //showsHorizontalScrollIndicator                //hasParallaxImages={true}                slideStyle={{                  top: 10,                  height: SCREEN_HEIGHT - 20                  //backgroundColor: "black",                  //padding:2                  //opacity:this.state.isScrolledUp?.8:1                }}                containerCustomStyle={{                  height: SCREEN_HEIGHT,//INTRO_CAROUSEL_HEIGHT,                  backgroundColor: "rgba(0,0,0,.1)"                }}                onBeforeSnapToItem={() => {                }}                onScroll={() => {                  //this.setState({ focusedIntroPetIndex: this._carouselIntro.currentIndex });                  //this._carouselProfile.snapToItem(0); //when focusedPet change, reset profile index                }}              />              </Animated.View>              {/*<Animated.View style={[{ zIndex:2,height: 350,opacity:profileFade }, { transform: [{ scale: profileImageScale }] }]}>                Profile                <Carousel                  ref={ref => (this._carouselProfile = ref)}                  data={focusedPet.pictures || []}                  renderItem={this.renderProfileItem}                  sliderWidth={SCREEN_WIDTH} //carousel width                  itemWidth={SCREEN_WIDTH * 0.9}                  hasParallaxImages={true}                  lockScrollWhileSnapping                  inactiveSlideScale={0.95}                  onScroll={() =>                    this.setState({                      focusedProfileImageIndex: this._carouselProfile.currentIndex                    })                  }                  containerCustomStyle={{                    //opacity: profileImageFadeWhileSwipe                  }}                />                <Animated.View style={[styles.profileTitleContainer, { opacity: profileDelayFadeIn }]}>                  <AnimatedBlurView tint="dark" intensity={60} style={[StyleSheet.absoluteFill]} />                  <Text                    style={{                      color: "white",                      //textAlign: "left",                      paddingTop: 0,                      fontSize: 24,                      fontWeight: "400"                    }}                  >                    {focusedPet.name}                  </Text>                </Animated.View>              </Animated.View>*/}              {/*<View style={{ height: 70 }}>                <Pagination                  activeDotIndex={this.state.focusedProfileImageIndex}                  dotsLength={focusedPet.pictures ? focusedPet.pictures.length : 0}                  //containerStyle={{backgroundColor:'gray',borderRadius:25,width:300}}                  dotColor={"black"}                  inactiveDotColor={"black"}                  dotStyle={{                    width: 20,                    height: 3,                    borderRadius: 10                  }}                  inactiveDotStyle={{                    width: 10,                    height: 10                  }}                  containerStyle={{                    marginVertical: 0                  }}                />              </View>*/}              {/*<Animated.View                style={{                  zIndex:1,                  marginTop:-20,                  paddingTop:20,                  //backgroundColor:'#d3d3d3',                  borderWidth:1,                  borderColor:'white',                  borderRadius:5,                  marginBottom: INTRO_CAROUSEL_HEIGHT,                  marginHorizontal: SCREEN_WIDTH * 0.05,                  marginVertical: 0,                }}              >                <PetDetailList petObj={focusedPet} flag={this.state.petSwitchFlag} themeColor={COLORS[colorIndex]} colorIndex={colorIndex} />              </Animated.View>*/}            </ScrollView>          </LinearGradient>        </Animated.View>        <Animated.View          style={{            opacity:introFade,            position: "absolute",            //left: SCREEN_WIDTH * 0.05,            width: SCREEN_WIDTH,            justifyContent: "center",            alignItems: "center",            zIndex: 100,            bottom: 0, //20,            height: INTRO_CAROUSEL_HEIGHT,            transform: [{ translateY: introCarouselTransY }]          }}        >            {/*<Animated.View              style={[{ position: "absolute", alignSelf: "center", borderWidth: 1, borderColor: "white", width: 300, height: 130, top: 10 }, { transform: [{ rotate: introCarouselSwipeBorder }] }]}            />*/}            {/*<LinearGradient colors={['white','white']} start={[0.5, 0]} end={[1, 1]}>*/}            {/*<LinearGradient colors={[GRADIENTS[colorIndex][0], GRADIENTS[colorIndex][1] || "transparent"]} start={[0.5, 0]} end={[1, 1]}>*/}            {!this.state.isScrolledUp&&this.state.petsForCarousel.length > 0 ? (              <Carousel                //layout={"stack"}                ref={ref => (this._carouselIntro = ref)}                data={this.state.petsForCarousel}                renderItem={this.renderIntroItem}                sliderWidth={SCREEN_WIDTH} //carousel width                itemWidth={SCREEN_WIDTH * 0.8}                lockScrollWhileSnapping                inactiveSlideScale={0.9}                //showsHorizontalScrollIndicator                //hasParallaxImages={true}                slideStyle={{                  top: 10,                  height: INTRO_CAROUSEL_HEIGHT - 20                  //backgroundColor: "black",                  //padding:2                  //opacity:this.state.isScrolledUp?.8:1                }}                containerCustomStyle={{                  height: INTRO_CAROUSEL_HEIGHT,                  backgroundColor: "rgba(0,0,0,.1)"                }}                onBeforeSnapToItem={() => {                  this.setState({ petSwitchFlag: !this.state.petSwitchFlag });                  this._carouselProfile.snapToItem(0);                  //this.anime_introCarouselSwipe.start(this.state.anime_introCarouselSwipe.setValue(150))                }}                onScroll={() => {                  this.setState({ focusedIntroPetIndex: this._carouselIntro.currentIndex });                  //this._carouselProfile.snapToItem(0); //when focusedPet change, reset profile index                }}              />            ) : (              <Spinner size={"large"} color={"#ffffff"} />            )}            {/*</LinearGradient>*/}        </Animated.View>      </Animated.View>    );  }  renderProfileItem = ({ item, index }) => {    const { fullsizeUrl } = item;    return (      <View        style={{          flexGrow: 1,          borderRadius: 10,          overflow: "hidden"        }}      >        <Image          source={{ uri: fullsizeUrl }}          style={{            flexGrow: 1,            height: "100%",            width: "100%",            position: "absolute"          }}        />      </View>    );  };  renderIntroItem = ({ item, index }, parallaxProps) => {    const { name, animalID, orgID, pictures } = item;    return (      <View        style={{          flexGrow: 1,          borderRadius: 10,          overflow: "hidden",          margin: 5,          flexDirection: "column"        }}      >        <View style={{ flex: 1 }}>          <Image            onLoad={() => console.log("intro catrousel items onloading")}            source={{ uri: pictures[0].largeUrl }}            style={{              height: "100%",              width: "100%",              position: "absolute",              top: 0,              left: 0            }}          />        </View>        <View style={{ height: 50, justifyContent: "center", alignItems: "center", backgroundColor: "black",opacity:.5 }}>          <Text style={{ fontSize: 20, color: "white" }}>{name}</Text>          <Text style={{ fontSize: 16, color: "white" }}>{animalID}</Text>        </View>      </View>    );  };  renderIntroItem2 = ({ item, index }, parallaxProps) => {    const { name, animalID, orgID, pictures } = item;    return (      <View        style={{          flexGrow: 1,          borderRadius: 10,          overflow: "hidden",          margin: 5,          flexDirection: "column"        }}      >        <View style={{ flex: 1 }}>          <Image            onLoad={() => console.log("intro catrousel items onloading")}            source={{ uri: pictures[0].largeUrl }}            style={{              height: "100%",              width: "100%",              position: "absolute",              top: 0,              left: 0            }}          />        </View>        <View style={{ height:100,justifyContent: "center", alignItems: "center", backgroundColor: "black",opacity:.8 }}>          <Text style={{ fontSize: 20, color: "white" }}>{name}</Text>          <Text style={{ fontSize: 16, color: "white" }}>{animalID}</Text>        </View>      </View>    );  };}const styles = StyleSheet.create({  swipeIcon: {    borderColor: "white",    borderWidth: 1,    height: 40,    width: 40,    padding: 5  },  profileTitleContainer: {    zIndex: 999,    //marginLeft:SCREEN_WIDTH*.5,    position: "absolute",    paddingVertical: 5,    paddingHorizontal: 25,    bottom: 0,    alignSelf: "center"    //width:300,    //height:50    //width: SCREEN_WIDTH * .5,    //left: SCREEN_WIDTH * 0.1,    //marginLeft: SCREEN_WIDTH,    //transform: [{ translateX: profileDelayMoveLeft }]  }});function mapStateToProps(state) {  return {    petsByOrg: state.petsByOrg,    orgsDetailList: state.orgsDetailList,    likedPets: state.likedPets  };}MapScreen.propTypes = {};MapScreen.defaultProps = {  petsByOrg: {},  orgsDetailList: {    //newAdded:null,    list: {}  }};export default connect(mapStateToProps, actions)(MapScreen);