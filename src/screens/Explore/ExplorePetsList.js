import React, { Component } from "react";import { connect } from "react-redux";import * as actions from "../../actions";import { Dimensions, Image, ScrollView, Text, TouchableOpacity, View } from "react-native";import { Button } from "react-native-elements";import ModalSpinner from "../../components/Common/ModalSpinner";import Icon from "react-native-vector-icons/MaterialIcons";const loadingImages = [require("../../assets/images/catFace1.png"),require("../../assets/images/dogFace1.png")];const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class ExplorePetsList extends Component {  static navigationOptions = ({navigation}) => ({    title:'Explore Result',    headerLeft: (      <Icon        name="keyboard-arrow-left"        size={30}        type="materialicons"        style={{ paddingLeft: 20 }}        onPress={() => {          navigation.goBack()        }}      />    ),  });  constructor(props) {    super(props);    this.state = {      dataLoading: false,      orgsGeoList: [],      searchParams: {        species: null      }    };  }  onImageLoadEnd = () => {    this.setState({ dataLoading: false });  };  render() {    return (      <View style={{ flex: 1 }}>        {this.state.dataLoading && (          <ModalSpinner            visible={this.state.dataLoading}            transparent={true}            animationType={"none"}            setLoadingFalse={this.setLoadingFalse}          />        )}        <ScrollView style={{ flex: 1 }}>          {this.props.petsNearby &&            Object.keys(this.props.petsNearby).map(orgID => {              return (                Object.keys(this.props.petsNearby[orgID]).length > 0 && (                  <View                    key={`sectionFor${orgID}`}                    style={{ marginVertical: 0, paddingVertical: 20 }}                  >                    <Button                      buttonStyle={{alignSelf:'center',backgroundColor:'#3e3e3e'}}                      title={this.props.orgsDetailList.list[orgID]?this.props.orgsDetailList.list[orgID].name:orgID}                      onPress={() =>                        this.props.navigation.navigate("exploreOrgDetail", {                          orgID: orgID                        })                      }                    />                    <Text>                      {Object.keys(this.props.petsNearby[orgID])[0].name}                    </Text>                    <PetsForOrg                      data={this.props.petsNearby[orgID]}                      onImageLoadEnd={this.onImageLoadEnd}                      navigation={this.props.navigation}                    />                  </View>                )              );            })}          <Text />        </ScrollView>      </View>    );  }}class PetsForOrg extends Component {  state = {    imageLoading: false  };  render() {    return (      <View        style={{          flexDirection: "row",          flex: 1,          flexWrap: "wrap",          justifyContent: "flex-start",          alignItems: "center"        }}      >        {this.props.data &&          Object.keys(this.props.data).map(petID => (            <View              key={`imgFor${petID}`}              style={{                backgroundColor: "white",                width: SCREEN_WIDTH * 0.5 - 4,                height: SCREEN_HEIGHT * 0.3,                alignItems: "center",                marginVertical: 2,                marginHorizontal: 2              }}            >              {this.props.data[petID].pictures[0] && (                <TouchableOpacity                  activeOpacity={0.9}                  onPress={() =>                    this.props.navigation.navigate("explorePetDetail", {                      petObj: this.props.data[petID]                    })                  }                >                  <Image                    onLoadStart={() => {                      this.setState({ imageLoading: true });                    }}                    onLoadEnd={() => {                      this.setState({ imageLoading: false });                    }}                    style={{                      width: SCREEN_WIDTH * 0.5 - 4,                      height: SCREEN_HEIGHT * 0.3 - 40                    }}                    defaultSource={this.props.data[petID].species==='Cat'?loadingImages[0]:loadingImages[1]                      /*loadingImages[                        Math.floor(Math.random() * loadingImages.length)                      ]*/                    } //{require("../../assets/paw.png")}                    source={{                      uri: this.props.data[petID].pictures[0].largeUrl                    }}                  />                  <Text                    style={{                      color: "white",                      padding: 10,                      height: 40,                      fontWeight: "500",                      textAlign: "center",                      alignSelf: "center"                    }}                  >                    {this.props.data[petID].name.toUpperCase()}                  </Text>                </TouchableOpacity>              )}            </View>          ))}      </View>    );  }}const mapStateToProps = state => {  return {    petsNearby: state.petsNearby,    orgsDetailList: state.orgsDetailList  };};export default connect(mapStateToProps, actions)(ExplorePetsList);