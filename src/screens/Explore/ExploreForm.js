import React, { Component } from "react";import { connect } from "react-redux";import * as actions from "../../actions";import { Dimensions, Text, View } from "react-native";import { Button } from "react-native-elements";import ModalSpinner from "../../components/Common/ModalSpinner";import { firedb } from "../../modules/firebase";import GeoFire from "geofire";const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class Test extends Component {  constructor(props) {    super(props);    this.state = {      dataLoading: false,      orgsGeoList: [],      petsNearby: {},      searchParams: {        species: "Cat"      }    };    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [0, 0],      radius: 1    });    this.orgsGeoList = [];    this.geoQuery.on("ready", () => {      console.log('EXPLORE geofire ready')      this.orgsGeoList.map(org => {        this.props.fetchNearbyPets(org.key, this.state.searchParams);        this.props.fetchOrgDetail(org.key);      });      this.setState({ orgsGeoList: this.orgsGeoList, dataLoading: false });      this.orgsGeoList=[]    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      console.log("EXPLORE geofire key_entered", key);      this.orgsGeoList.push({ key, distance });    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      console.log("EXPLORE geofire key_exited", key);      this.orgsGeoList = _.remove(this.orgsGeoList, n => {        return n.key === key;      });    });  }  componentDidMount(){  }  componentWillUnmount(){    console.log('expore unmount')    this.geoQuery.cancel()  }  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  onImageLoadEnd = () => {    this.setState({ dataLoading: false });  };  render() {    return (      <View style={{ flex: 1 }}>        {this.state.dataLoading && (          <ModalSpinner visible={this.state.dataLoading} transparent={true} animationType={"none"} setLoadingFalse={this.setLoadingFalse} />        )}        <View>          <Text>Organizations found: {this.state.orgsGeoList.length}</Text>          <View style={{ flex: 1 }} />          <Button            title={"search"}            onPress={() => {              this.updateCriteria(37, -122, 50);              this.props.navigation.navigate("explorePetsList");            }}          />        </View>      </View>    );  }}export default connect(null, actions)(Test);