import React, { Component } from "react";import { connect } from "react-redux";import * as actions from "../../actions";import { Dimensions, Picker, StyleSheet, Text, View } from "react-native";import { Button, CheckBox, Slider } from "react-native-elements";import ModalSpinner from "../../components/Common/ModalSpinner";import { firedb } from "../../modules/firebase";import GeoFire from "geofire";const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class ExploreForm extends Component {  constructor(props) {    super(props);    this.state = {      dataLoading: false,      orgsGeoList: [],      //petsNearby: {},      currentP: null,      sex: null,      species: null,      language: "",      distanceSliderValue: 10    };    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [0, 0],      radius: 0.001    });    this.orgsGeoList = [];    this.geoQuery.on("ready", () => {      console.log("EXPLORE geofire ready");      const searchParams = {        species: this.state.species,        sex: this.state.sex,        color: "black"      };      this.orgsGeoList.map(org => {        this.props.fetchNearbyPets(org.key, searchParams);        this.props.fetchOrgDetail(org.key);      });      this.setState({ orgsGeoList: this.orgsGeoList, dataLoading: false });      //this.orgsGeoList = [];    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      console.log("EXPLORE geofire key_entered", key);      this.orgsGeoList.push({ key, distance });    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      console.log("EXPLORE geofire key_exited", key);      this.orgsGeoList = _.remove(this.orgsGeoList, n => {        return n.key === key;      });    });  }  componentDidMount() {    //current position    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({        currentP: {          latitude,          longitude        }      });    });  }  /*static getDerivedStateFromProps(props, state) {    if (props.petsNearby && props.petsNearby !== state.petsNearby) {      return {        petsNearby: props.petsNearby      };    }    return null;  }*/  componentWillUnmount() {    console.log("expore unmount");    this.geoQuery.cancel();  }  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  render() {    //console.log("aa", Object.keys(this.props.petsNearby).length);    return (      <View style={styles.container}>        {this.state.orgsGeoList.length && (          <View style={styles.row}>            <Text>              Found: {this.state.orgsGeoList.length} organizations            </Text>          </View>        )}        {this.state.dataLoading && (          <ModalSpinner            visible={this.state.dataLoading}            transparent={true}            animationType={"none"}            setLoadingFalse={this.setLoadingFalse}          />        )}        <View style={{ flex: 1, justifyContent: "center" }}>          <View style={styles.row}>            <View style={styles.rowItem1}>              <Text>Sex</Text>            </View>            <View style={[styles.rowItem2, { flexDirection: "row" }]}>              <CheckBox                containerStyle={styles.checkboxStyle}                textStyle={styles.checkboxTitle}                size={20}                checkedIcon="md-male"                uncheckedIcon="md-male"                iconType="ionicon"                //title="Male"                checked={this.state.sex === "Male"}                onPress={() => {                  this.setState({ sex: "Male" });                }}              />              <CheckBox                containerStyle={styles.checkboxStyle}                textStyle={styles.checkboxTitle}                size={20}                checkedIcon="md-female"                uncheckedIcon="md-female"                iconType="ionicon"                //title="Female"                checked={this.state.sex === "Female"}                onPress={() => {                  this.setState({ sex: "Female" });                }}              />              <CheckBox                containerStyle={styles.checkboxStyle}                textStyle={styles.checkboxTitle}                size={20}                checkedIcon="md-radio-button-on"                uncheckedIcon="md-radio-button-off"                iconType="ionicon"                title="Both"                checked={this.state.sex === null}                onPress={() => {                  this.setState({ sex: null });                }}              />            </View>          </View>          <View style={styles.row}>            <View style={styles.rowItem1}>              <Text>Species</Text>            </View>            <View style={[styles.rowItem2, { flexDirection: "row" }]}>              <CheckBox                containerStyle={styles.checkboxStyle}                textStyle={styles.checkboxTitle}                size={20}                checkedIcon="cat"                uncheckedIcon="cat"                iconType="material-community"                //title="Cat"                checked={this.state.species === "Cat"}                onPress={() => {                  this.setState({ species: "Cat" });                }}              />              <CheckBox                containerStyle={styles.checkboxStyle}                textStyle={styles.checkboxTitle}                size={20}                checkedIcon="guide-dog"                uncheckedIcon="guide-dog"                iconType="foundation"                //title="Dog"                checked={this.state.species === "Dog"}                onPress={() => {                  this.setState({ species: "Dog" });                }}              />              <CheckBox                containerStyle={styles.checkboxStyle}                textStyle={styles.checkboxTitle}                size={20}                checkedIcon="md-radio-button-on"                uncheckedIcon="md-radio-button-off"                iconType="ionicon"                title="Both"                checked={this.state.species === null}                onPress={() => {                  this.setState({ species: null });                }}              />            </View>          </View>          <View style={styles.row}>            <View style={[styles.rowItem1]}>              <Text>Radius</Text>            </View>            <View              style={[                styles.rowItem2,                {                  marginHorizontal: 10,                  //backgroundColor:'red',                  flexGrow: 1,                  alignItems: "stretch"                  //justifyContent: "space-between"                }              ]}            >              <Slider                thumbStyle={{                  backgroundColor:'white',                  borderWidth:1,                  borderColor:'#cdcdcd',                  shadowColor: "#5f5f5f",                  shadowOffset: { height: 3},                  shadowOpacity: .4                }}                //thumbTintColor={"black"}                //thumbImage={require('../../assets/pawThumb.jpg')}                maximumValue={30}                value={this.state.distanceSliderValue}                minimumTrackTintColor={"#2089dc"}                onValueChange={distanceSliderValue =>                  this.setState({ distanceSliderValue })                }              />              <Text>{this.state.distanceSliderValue.toFixed(2)} km</Text>            </View>          </View>          <View style={{ marginVertical: 20, flexDirection: "column" }}>            <Text>              Notify when new pets meets your search condition            </Text>            <Picker              selectedValue={this.state.notify}              style={{ top: -50, height: 100 }}              onValueChange={(itemValue, itemIndex) =>                this.setState({ notify: itemValue })              }            >              <Picker.Item label="Don't Bother Me" value={false} />              <Picker.Item label="Let Me Know!" value={true} />            </Picker>          </View>          <View style={{ width: 300, alignSelf: "center" }}>            <Button              title={                !this.state.currentP                  ? "Fetching position"                  : Object.keys(this.props.petsNearby).length                    ? "Clear Old Result"                    : "Search"              }              disabled={!this.state.currentP}              icon={{                type: "materialicon",                name: !this.state.currentP                  ? "remove"                  : Object.keys(this.props.petsNearby).length                    ? "remove-circle-outline"                    : "search",                color: "white"              }}              onPress={                Object.keys(this.props.petsNearby).length                  ? () => {                      this.props.clearNearbyPets();                    }                  : () => {                      this.updateCriteria(                        this.state.currentP.latitude,                        this.state.currentP.longitude,                        this.state.distanceSliderValue                      );                      this.props.navigation.navigate("explorePetsList");                    }              }            />          </View>        </View>      </View>    );  }}const styles = StyleSheet.create({  container: {    flex: 1,    justifyContent: "center"    //alignItems:'center'  },  row: {    flexDirection: "row",    left: 0,    right: 0,    paddingVertical: 20,    paddingHorizontal: 20,    backgroundColor: "white",    overflow: "hidden",    borderBottomWidth: 1,    borderColor: "#d6d6d6"  },  rowItem1: {    width: 70,    //paddingRight:0,    //backgroundColor:'gray',    justifyContent: "center",    alignItems: "flex-start"  },  rowItem2: {    flexGrow: 1,    justifyContent: "center",    alignItems: "center"  },  checkboxStyle: {    //backgroundColor:'green',    flex: 1,    borderWidth: 0,    backgroundColor: "transparent",    justifyContent:'center',    alignItems:'center',  },  checkboxTitle: {    fontSize: 10    //backgroundColor:'red',  }});ExploreForm.defaultProps = {  petsNearby: {}};const mapStateToProps = state => {  return {    petsNearby: state.petsNearby  };};export default connect(mapStateToProps, actions)(ExploreForm);