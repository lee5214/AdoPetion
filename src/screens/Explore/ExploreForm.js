import React, { Component } from "react";import { connect } from "react-redux";import * as actions from "../../actions";import { Dimensions, Picker, StyleSheet, Text, View } from "react-native";import { Button, Slider } from "react-native-elements";import ModalSpinner from "../../components/Common/ModalSpinner";import { firedb } from "../../modules/firebase";import GeoFire from "geofire";const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");class ExploreForm extends Component {  constructor(props) {    super(props);    this.state = {      dataLoading: false,      orgsGeoList: [],      //petsNearby: {},      currentP: null,      species: "Cat",      language: "",      distanceSliderValue: 0    };    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [0, 0],      radius: 0.001    });    this.orgsGeoList = [];    this.geoQuery.on("ready", () => {      console.log("EXPLORE geofire ready");      const searchParams = {        species: this.state.species      };      this.orgsGeoList.map(org => {        this.props.fetchNearbyPets(org.key, searchParams);        this.props.fetchOrgDetail(org.key);      });      this.setState({ orgsGeoList: this.orgsGeoList, dataLoading: false });      //this.orgsGeoList = [];    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      console.log("EXPLORE geofire key_entered", key);      this.orgsGeoList.push({ key, distance });    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      console.log("EXPLORE geofire key_exited", key);      this.orgsGeoList = _.remove(this.orgsGeoList, n => {        return n.key === key;      });    });  }  componentDidMount() {    //current position    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({        currentP: {          latitude,          longitude        }      });    });  }  /*static getDerivedStateFromProps(props, state) {    if (props.petsNearby && props.petsNearby !== state.petsNearby) {      return {        petsNearby: props.petsNearby      };    }    return null;  }*/  componentWillUnmount() {    console.log("expore unmount");    this.geoQuery.cancel();  }  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  render() {    //console.log("aa", Object.keys(this.props.petsNearby).length);    return (      <View style={styles.container}>        {this.state.orgsGeoList.length && (          <View style={styles.row}>            <Text>Organizations found: {this.state.orgsGeoList.length}</Text>          </View>        )}        {this.state.dataLoading && (          <ModalSpinner            visible={this.state.dataLoading}            transparent={true}            animationType={"none"}            setLoadingFalse={this.setLoadingFalse}          />        )}        {/*<Text>There are {Object.keys(this.props.petsNearby).length} pets</Text>*/}        <View style={{ flex: 1, justifyContent: "center" }}>          <View style={styles.row}>            <View style={{ justifyContent: "center" }}>              <Text style={styles.rowItem1}>Radius</Text>            </View>            <View              style={{                flexGrow: 1,                alignItems: "stretch",                justifyContent: "center"              }}            >              <Slider                maximumValue={100}                value={this.state.distanceSliderValue}                minimumTrackTintColor={"black"}                onValueChange={distanceSliderValue =>                  this.setState({ distanceSliderValue })                }              />              <Text>{this.state.distanceSliderValue.toFixed(2)} km</Text>            </View>          </View>          <Picker            selectedValue={this.state.language}            style={{ height: 50, width: 100 }}            onValueChange={(itemValue, itemIndex) =>              this.setState({ language: itemValue })            }          >            <Picker.Item label="Java" value="java" />            <Picker.Item label="JavaScript" value="js" />          </Picker>          <Button            title={              !this.state.currentP                ? "Fetching position"                : Object.keys(this.props.petsNearby).length                  ? "Clear Old Result"                  : "Search"            }            disabled={!this.state.currentP}            icon={{ name: "send", type: "font-awesome", color: "white" }}            onPress={              Object.keys(this.props.petsNearby).length                ? () => {                    this.props.clearNearbyPets();                    //this.props.navigation.navigate("explorePetsList");                  }                : () => {                    this.updateCriteria(                      this.state.currentP.latitude,                      this.state.currentP.longitude,                      this.state.distanceSliderValue                    );                    this.props.navigation.navigate("explorePetsList");                  }            }          />        </View>      </View>    );  }}const styles = StyleSheet.create({  container: {    flex: 1,    justifyContent: "center"    //alignItems:'center'  },  row: {    flexDirection: "row",    left: 0,    right: 0,    paddingVertical: 20,    paddingHorizontal: 20,    backgroundColor: "white"    // borderBottomWidth: 1,    // borderColor: "gray"  },  rowItem1: {    width: 100  }});ExploreForm.defaultProps = {  petsNearby: {}};const mapStateToProps = state => {  return {    petsNearby: state.petsNearby  };};export default connect(mapStateToProps, actions)(ExploreForm);