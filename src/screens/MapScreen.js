import React, { Component } from "react";import PropTypes from "prop-types";import { ActivityIndicator, Modal, Text, View } from "react-native";import { Button } from "react-native-elements";import { connect } from "react-redux";import * as actions from "../actions";import Icon from "react-native-vector-icons/MaterialIcons";import GeoFire from "geofire";import { firedb } from "../modules/firebase";import MapContainer from "../components/Map/MapContainer";class MapScreen extends Component {  static navigationOptions = {    title: "Map",    tabBarIcon: ({ tintColor }) => {      return (        <Icon name="place" color={tintColor} size={20} type="materialicons" />      );    }  };  constructor(props) {    super(props);    this.state = {      region: {        latitude: 37.6,        longitude: -122,        longitudeDelta: 0.04,        latitudeDelta: 0.09      },      dataLoading: false,      radius: 10,      markersList: []    };    this.markersHolder = {};    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 10    });  }  componentDidMount() {    this.geoQuery.on("ready", async () => {      let arr = [];      await Object.keys(this.markersHolder).map(marker => {        arr.push(this.markersHolder[marker]);      });      this.setState({        markersList: arr,        dataLoading: false      });    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      this.markersHolder[key] = { key, location, distance };    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      delete this.markersHolder[key];      //console.log(`${this.state.markersList.length} left`);    });    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({ region: { ...this.state.region, latitude, longitude } });    });  }  radiusFitScreen = (longitudeDelta, latitude) => {    let zoom = Math.round(Math.log(360 / longitudeDelta) / Math.LN2);    let sPerPx =      10 *      156543.03392 *      Math.cos(latitude * Math.PI / 180) /      Math.pow(2, zoom);    this.setState({ radius: sPerPx });  };  onRegionChangeComplete = region => {    clearTimeout(this.timerForMap);    this.timerForMap = setTimeout(() => {      this.setState({ region });    }, 100);  };  onSearchArea = (lat, lng, rad) => {    this.updateCriteria(lat, lng, rad);  };  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  changeRadius10 = () => {    this.setState(      { radius: 10 },      this.geoQuery.updateCriteria({        radius: this.state.radius      })    );  };  changeRadius50 = () => {    this.setState(      { radius: 50 },      this.geoQuery.updateCriteria({        radius: this.state.radius      })    );  };  render() {    console.log("MapScreen: dataLoading", this.state.dataLoading);    return (      <View style={styles.container}>        <Modal          transparent={true}          visible={this.state.dataLoading}        >          <ActivityIndicator           style={styles.spinner }           size={"large"}           animating={true}           hidesWhenStopped={true}           />          {/*<Button*/}            {/*title={"false"}*/}            {/*backgroundColor={"#009688"}*/}            {/*onPress={() => {*/}              {/*this.setState({ dataLoading: false });*/}            {/*}}*/}          {/*/>*/}        </Modal>        <MapContainer          dataLoading={this.state.dataLoading}          region={this.state.region}          markersList={this.state.markersList}          onRegionChangeComplete={this.onRegionChangeComplete}          radius={this.state.radius}        >          <View style={styles.centerPointer} />        </MapContainer>        <View style={styles.buttonGroupContainer}>          <Text style={{ textAlign: "center", color: "white" }}>            {this.state.region.latitude.toFixed(2)}|{this.state.region.longitude.toFixed(              2            )}          </Text>          <Text style={{ textAlign: "center", color: "white" }}>            {this.state.region.latitudeDelta.toFixed(2)}|{this.state.region.longitudeDelta.toFixed(              2            )}          </Text>          {/*<Text style={{ textAlign: "center", color: "white" }}>*/}          {/*Radius: {zoom}*/}          {/*</Text>*/}          <View>            <Button              title={"search radius 10"}              backgroundColor={"#009688"}              onPress={this.changeRadius10}            />            <Button              title={"search radius 50"}              backgroundColor={"#009688"}              onPress={this.changeRadius50}            />            <Button              title={"search this area"}              backgroundColor={"#009688"}              onPress={() =>                this.onSearchArea(                  this.state.region.latitude,                  this.state.region.longitude,                  this.state.radius                )              }            />            <Button              title={"true"}              backgroundColor={"#009688"}              onPress={() => {                this.setState({ dataLoading: true });              }}            />            <Button              title={"false"}              backgroundColor={"#009688"}              onPress={() => {                this.setState({ dataLoading: false });              }}            />          </View>        </View>      </View>    );  }}const styles = {  container: {    flex: 1,    justifyContent: "center"  },  buttonGroupContainer: {    position: "absolute",    bottom: 8,    left: 20,    right: 20  },  spinner: {    zIndex:-1,    height: 400,    width: 400,    position: "absolute",    backgroundColor:'red'  },  spinnerContainer: {    width: 400,    height: 400,    left: 0,    right: 0,    top: 0,    justifyContent: "center",    backgroundColor: "red"  },  centerPointer: {    width: 4,    height: 4,    backgroundColor: "white",    borderRadius: 25  }};const mapStateToProps = state => {  return {    jobsList: state.jobsList.results,    petsList: state.petsList  };};MapScreen.propTypes = {  jobsList: PropTypes.array.isRequired};MapScreen.defaultProps = {  jobsList: [],  petsList: []};export default connect(mapStateToProps, actions)(MapScreen);