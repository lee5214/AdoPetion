import React, { Component } from "react";import PropTypes from "prop-types";import { Text, View } from "react-native";import { Button } from "react-native-elements";import { connect } from "react-redux";import * as actions from "../actions";import Icon from "react-native-vector-icons/MaterialIcons";import GeoFire from "geofire";import { firedb } from "../modules/firebase";import MapContainer from "../components/Map/MapContainer";let tempArr = {};class MapScreen extends Component {  static navigationOptions = {    title: "Map",    tabBarIcon: ({ tintColor }) => {      return (        <Icon name="place" color={tintColor} size={20} type="materialicons" />      );    }  };  constructor(props) {    super(props);    this.state = {      region: {        latitude: 37.6,        longitude: -122,        longitudeDelta: 0.04,        latitudeDelta: 0.09      },      radius: 10,      markersList: [],      currentCoords: null    };    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 10    });    this.geoQuery.on("ready", () => {      console.log(        "GeoQuery has loaded and fired all other events for initial data"      );      this.setState({        markersList: tempArr,        dataLoading: false      });    });    this.geoQuery.on("key_entered", (key, location, distance) => {      console.log(`entered ${key}`);      this.setState({ dataLoading: true });      // this.setState({      //   markersList: [...this.state.markersList, { key, location, distance }]      // });      tempArr[key]=true    });    this.geoQuery.on("key_exited", (key, location, distance) => {      console.log(`${key} exited, ${this.state.markersList.length} still in`);      //let newMarkersList = [{ key, location, distance }];      // let newMarkersList = tempArr.filter(      //   markerKey => markerKey.key !== key      // );      tempArr[key] == false;      //this.setState({ markersList: newMarkersList });      console.log(`${this.state.markersList.length} left`);    });  }  componentDidMount() {    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({ region: { ...this.state.region, latitude, longitude } });    });    // let ref = firedb.ref("orgs");    // let geoFire = new GeoFire(ref);    // let geoQuery = geoFire.query({    //   center: [region.latitude, region.longitude],    //   radius: 1000    // });    // geoFire.set("some_key", [37.785326, -122.405696]).then(function() {    //   console.log("Provided key has been added to GeoFire");    // }, function(error) {    //   console.log("Error: " + error);    // });  }  radiusFitScreen = (longitudeDelta, latitude) => {    let zoom = Math.round(Math.log(360 / longitudeDelta) / Math.LN2);    let sPerPx =      10 *      156543.03392 *      Math.cos(latitude * Math.PI / 180) /      Math.pow(2, zoom);    this.setState({ radius: sPerPx });  };  onRegionChangeComplete = region => {    //this.radiusFitScreen(region.longitudeDelta,region.latitude)    clearTimeout(this.timerForMap);    this.timerForMap = setTimeout(() => {      this.setState({ region });    }, 100);  };  // onButtonPress = async () => {  //   await this.props.fetchJobs(this.state.region);  //   //this.props.navigation.navigate("deck");  // };  onSearchArea = (lat, lng, rad) => {    this.updateCriteria(lat, lng, rad);    // this.geoQuery.updateCriteria({    //   center: [this.state.region.latitude, this.state.region.longitude],    //   //radius: this.state.radius    // });  };  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  changeRadius10 = () => {    this.setState(      { radius: 10 },      this.geoQuery.updateCriteria({        //center: [this.state.region.latitude, this.state.region.longitude],        radius: this.state.radius      })    );  };  changeRadius50 = () => {    this.setState(      { radius: 50 },      this.geoQuery.updateCriteria({        //center: [this.state.region.latitude, this.state.region.longitude],        radius: this.state.radius      })    );  };  render() {    //console.log(this.state.radius)    // zoom level    return (      <View style={styles.container}>        {this.state.dataLoading ? (          <View>LadoingSpinner</View>        ) : (          <MapContainer            region={this.state.region}            markersList={this.state.markersList}            onRegionChangeComplete={this.onRegionChangeComplete}            radius={this.state.radius}          />        )}        <View style={styles.searchButtonContainer}>          <Text style={{ textAlign: "center", color: "white" }}>            Lat: {this.state.region.latitude}          </Text>          <Text style={{ textAlign: "center", color: "white" }}>            Lng: {this.state.region.longitude}          </Text>          <Text style={{ textAlign: "center", color: "white" }}>            Lat: {this.state.region.latitudeDelta}          </Text>          <Text style={{ textAlign: "center", color: "white" }}>            Lng: {this.state.region.longitudeDelta}          </Text>          {/*<Text style={{ textAlign: "center", color: "white" }}>*/}          {/*Radius: {zoom||null}*/}          {/*</Text>*/}          <Button            title={"test change geo"}            backgroundColor={"#009688"}            //onPress={()=>this.onTest(this.state.region.latitude,this.state.region.longitude)}            onPress={this.onTest}          />          <View>            <Button              title={"radius to 10"}              backgroundColor={"#009688"}              onPress={this.changeRadius10}            />            <Button              title={"radius to 50"}              backgroundColor={"#009688"}              onPress={this.changeRadius50}            />            <Button              title={"search this area"}              backgroundColor={"#009688"}              onPress={() =>                this.onSearchArea(                  this.state.region.latitude,                  this.state.region.longitude,                  this.state.radius                )              }            />          </View>        </View>      </View>    );  }}const styles = {  container: {    flex: 1,    justifyContent: "center"  },  mapView: {    flex: 1  },  searchButtonContainer: {    position: "absolute",    bottom: 8,    left: -8,    right: -8  }};const mapStateToProps = state => {  console.log("MapScreen/mapStateToProps ", state.orgsList);  return {    jobsList: state.jobsList.results,    petsList: state.petsList,    orgsList: state.orgsList  };};MapScreen.propTypes = {  jobsList: PropTypes.array.isRequired};MapScreen.defaultProps = {  jobsList: [],  petsList: [],  orgsList: []};export default connect(mapStateToProps, actions)(MapScreen);