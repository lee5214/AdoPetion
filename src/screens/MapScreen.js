import React, { Component } from "react";import PropTypes from "prop-types";import { connect } from "react-redux";import { Text, View } from "react-native";import { Button } from "react-native-elements";import * as actions from "../actions";import Icon from "react-native-vector-icons/MaterialIcons";import GeoFire from "geofire";import { firedb } from "../modules/firebase";import MapContainer from "../components/Map/MapContainer";import ModalContainer from "../components/Map/ModalContainer";import { defaultRegion } from '../../config/setting/defaultValues';class MapScreen extends Component {  // noinspection JSUnusedGlobalSymbols  static navigationOptions = {    title: "Map",    tabBarIcon: ({ tintColor }) => {      return (        <Icon name="place" color={tintColor} size={20} type="materialicons" />      );    }  };  constructor(props) {    super(props);    this.state = {      region: defaultRegion,      dataLoading: false,      radius: 10,      markersList: [],    };    this.markersHolder = {};    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 10    });    this.geoQuery.on("ready", async () => {      let arr = [];      try {        await Object.keys(this.markersHolder).map(marker => {          arr.push(this.markersHolder[marker]);        });        this.setState({ markersList: arr });      } catch (e) {        console.log(e);      } finally {        this.setState({ dataLoading: false });      }    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      this.markersHolder[key] = { key, location, distance };    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      delete this.markersHolder[key];    });  }  componentDidMount() {    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({ region: { ...this.state.region, latitude, longitude } });    });  }  radiusFitScreen = (longitudeDelta, latitude) => {    let zoom = Math.round(Math.log(360 / longitudeDelta) / Math.LN2);    let sPerPx =      10 *      156543.03392 *      Math.cos(latitude * Math.PI / 180) /      Math.pow(2, zoom);    this.setState({ radius: sPerPx });  };  onRegionChangeComplete = region => {    clearTimeout(this.timerForMap);    this.timerForMap = setTimeout(() => {      this.setState({ region });    }, 100);  };  onSearchArea = (lat, lng, rad) => {    this.updateCriteria(lat, lng, rad);  };  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  changeRadius10 = () => {    this.setState(      { radius: 10 },      this.geoQuery.updateCriteria({        radius: this.state.radius      })    );  };  changeRadius50 = () => {    this.setState(      { radius: 50 },      this.geoQuery.updateCriteria({        radius: this.state.radius      })    );  };  setLoadingFalse = () => {    this.setState({ dataLoading: false });  };  // noinspection JSUnusedGlobalSymbols  static getDerivedStateFromProps(nextProps,prevProps){    console.log('screen: ',nextProps.orgsDetailList)    return{      orgsDetailList:nextProps.orgsDetailList    }  }  test=(orgsDetailList)=>{    {Object.keys(orgsDetailList).map((org,index)=>{      console.log('orgg2',orgsDetailList[org].city)      let {orgID,city} = orgsDetailList[org]      return(        <Text key={`orgDetail-${orgID}`} style={{ width:150,marginBottom:10,textAlign: "center", backgroundColor: "red" }}>{orgID}-{city}</Text>      )})}  }  render() {    console.log('render')    //console.log("MapScreen: dataLoading", this.state.dataLoading);    const {orgsDetailList} = this.props    console.log('hahaho',orgsDetailList)    let {      latitude,      longitude,      latitudeDelta,      longitudeDelta    } = this.state.region;    return (      <View style={styles.container}>        <ModalContainer          visible={this.state.dataLoading}          setLoadingFalse={this.setLoadingFalse}        />        <View style={styles.panContainer}>          <Text style={{ textAlign: "center", color: "white" }}>            {latitude.toFixed(2)}|{longitude.toFixed(2)}          </Text>          <Text style={{ textAlign: "center", color: "white" }}>            {latitudeDelta.toFixed(2)}|{longitudeDelta.toFixed(2)}          </Text>          {/*<Text style={{ textAlign: "center", color: "white" }}>*/}          {/*Radius: {zoom}*/}          {/*</Text>*/}          <View style={{height:200,width:'100%',backgroundColor:'white',alignItems:'flex-start',}}>            {this.test(orgsDetailList)}            {/*{Object.keys(this.props.orgsDetailList).map((org,index)=>{*/}              {/*console.log('orgg',this.props.orgsDetailList[org].city)*/}              {/*let {orgID,city} = this.props.orgsDetailList[org]*/}              {/*return(*/}                {/*<Text key={`orgDetail-${orgID}`} style={{ width:150,marginBottom:10,textAlign: "center", backgroundColor: "red" }}>{orgID}-{city}</Text>*/}              {/*)})}*/}            <View style={{position:'absolute',width:'100%',bottom:0,flexDirection:'row',justifyContent:'space-around'}}>              <Button                title={"r10"}                backgroundColor={"#009688"}                onPress={this.changeRadius10}              />              <Button                title={"r50"}                backgroundColor={"#009688"}                onPress={this.changeRadius50}              />              <Button                title={"search"}                backgroundColor={"#009688"}                onPress={() =>                  this.onSearchArea(latitude, longitude, this.state.radius)                }              />              <Button                title={"true"}                backgroundColor={"#009688"}                onPress={() => {                  this.setState({ dataLoading: true });                }}              />              <Button                title={"false"}                backgroundColor={"#009688"}                onPress={() => {                  this.setState({ dataLoading: false });                }}              />            </View>          </View>        </View>        <MapContainer          dataLoading={this.state.dataLoading}          region={this.state.region}          markersList={this.state.markersList}          onRegionChangeComplete={this.onRegionChangeComplete}          radius={this.state.radius}          orgsDetailList={this.props.orgsDetailList}          fetchOrgDetail={this.props.fetchOrgDetail}          onMarkerPress={this.onMarkerPress}          navigation={this.props.navigation}        >          <View style={styles.centerPointer} />        </MapContainer>      </View>    );  }}const styles = {  container: {    flex: 1,    justifyContent: "center"  },  panContainer: {    width:'80%',    left:'10%',    bottom:0,    zIndex: 1,    position: "absolute",  },  spinner: {    zIndex: -1,    height: 40,    width: 40,    left: 0,    right: 0,    backgroundColor: "red"  },  centerPointer: {    width: 4,    height: 4,    backgroundColor: "white",    borderRadius: 25  }};const mapStateToProps = state => {  return {    jobsList: state.jobsList.results,    petsList: state.petsList,    orgsDetailList: state.orgsDetailList  };};MapScreen.propTypes = {  jobsList: PropTypes.array.isRequired};MapScreen.defaultProps = {  jobsList: [],  petsList: [],  orgsDetailList:{},};export default connect(mapStateToProps,actions)(MapScreen);