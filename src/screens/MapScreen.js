import React, { Component } from "react";import PropTypes from "prop-types";import { connect } from "react-redux";import { StyleSheet, Text, View } from "react-native";import { Button } from "react-native-elements";import * as actions from "../actions";import Icon from "react-native-vector-icons/MaterialIcons";import GeoFire from "geofire";import { firedb } from "../modules/firebase";import MapContainer from "../components/Map/MapContainer";import ModalContainer from "../components/Map/ModalContainer";import { defaultRegion } from "../../config/setting/defaultValues";import MapCarousel from "../components/Map/MapCarousel";class MapScreen extends Component {  // noinspection JSUnusedGlobalSymbols 1  static navigationOptions = {    title: "Map",    header: null,    tabBarIcon: ({ tintColor }) => {      return (        <Icon name="place" color={tintColor} size={20} type="materialicons" />      );    },    drawerLabel: "MapScreen"  };  constructor(props) {    super(props);    this.state = {      region: defaultRegion,      radius: 10,      dataLoading: false,      orgsSearchedID: [],      focusedOrgID:-1,      //these two only contain geo locations from firedb      geoMarkersCurrentSearchResults: {},      geoMarkersAllSearchResultsSaved: {},      petsForCarousel:[]    };    this.markersHolder = {};    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 10    });    this.geoQuery.on("ready", async () => {      this.setState({        geoMarkersCurrentSearchResults: this.markersHolder,        geoMarkersAllSearchResultsSaved: {          ...this.state.geoMarkersAllSearchResultsSaved,          ...this.markersHolder        },        dataLoading: false      });    });    this.geoQuery.on("key_entered", (key, location, distance) => {      this.setState({ dataLoading: true });      this.markersHolder[key] = { key, location, distance };    });    this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      delete this.markersHolder[key];    });  }  componentDidMount() {    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({ region: { ...this.state.region, latitude, longitude } });    });  }  static getDerivedStateFromProps(props, state) {    if (      props.orgsDetailList.newAdded &&      state.orgsSearchedID.indexOf(props.orgsDetailList.newAdded) < 0    ) {      return {        orgsSearchedID: [props.orgsDetailList.newAdded, ...state.orgsSearchedID]      };    }    // if (this.state.focusedOrgID && props.petsByOrg[this.state.focusedOrgID]!==this.state.petsForCarousel){    //   return {petsForCarousel:props.petsByOrg[this.state.focusedOrgID]}    // }    return null;  }  radiusFitScreen = (longitudeDelta, latitude) => {    let zoom = Math.round(Math.log(360 / longitudeDelta) / Math.LN2);    let sPerPx =      10 *      156543.03392 *      Math.cos(latitude * Math.PI / 180) /      Math.pow(2, zoom);    this.setState({ radius: sPerPx });  };  updateRegionInScreen = region => {    if (this.timerForMap) {      clearTimeout(this.timerForMap);    }    this.timerForMap = setTimeout(() => {      this.setState({ region });    }, 100);  };  onSearchArea = (lat, lng, rad) => {    this.updateCriteria(lat, lng, rad);  };  updateCriteria = (lat, lng, rad) => {    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  };  changeRadius10 = () => {    this.setState(      { radius: 10 },      this.geoQuery.updateCriteria({        radius: this.state.radius      })    );  };  changeRadius50 = () => {    this.setState(      { radius: 50 },      this.geoQuery.updateCriteria({        radius: this.state.radius      })    );  };  setLoadingFalse = () => {    this.setState({ dataLoading: false });  };  //for org  onPanItemPress = id => {    this.markAnimateToCoord(this.state.geoMarkersAllSearchResultsSaved[id]);    this.props.navigation.navigate("mapDetail", {      //TODO rewrite      focusedOrg: this.props.orgsDetailList.list[id]    });  };  markAnimateToCoord = markerData => {    let coordinate = {      latitude: markerData.location[0],      longitude: markerData.location[1]    };    this.mapContainer.map.animateToCoordinate(coordinate, 500);  };  setFocusedOrgID = orgID =>{    this.setState({focusedOrgID:orgID})  }  render() {    const { orgsDetailList,petsByOrg } = this.props;    const focusedOrg = orgsDetailList[this.state.focusedOrgID]    // const data= this.props.petsByOrg[this.state.focusedOrgID]    // const carouselData = Object.keys(data).map(id=>data[id])||[]    // console.log('carouselData',carouselData)    const {      latitude,      longitude,      latitudeDelta,      longitudeDelta    } = this.state.region;    return (      <View style={styles.container}>        <ModalContainer          visible={this.state.dataLoading}          setLoadingFalse={this.setLoadingFalse}        />        <MapContainer          ref={ref => (this.mapContainer = ref)}          dataLoading={this.state.dataLoading}          geoMarkersCurrentSearchResults={            this.state.geoMarkersCurrentSearchResults          }          updateRegionInScreen={this.updateRegionInScreen}          onRegionChangeComplete={this.onRegionChangeComplete}          radius={this.state.radius}          orgsDetailList={this.props.orgsDetailList}          fetchOrgDetail={this.props.fetchOrgDetail}          fetchPetsByOrg = {this.props.fetchPetsByOrg}          petsForCarousel={this.state.petsForCarousel}          navigation={this.props.navigation}          setFocusedOrgID={this.setFocusedOrgID}        >          <View style={styles.centerPointer} />        </MapContainer>        <MapCarousel          itemType={"pets"}          focusedOrgID={this.state.focusedOrgID}          orgsDetailList={orgsDetailList}          petsByOrg={petsByOrg}          latitude={latitude}          longitude={longitude}          latitudeDelta={latitudeDelta}          longitudeDelta={longitudeDelta}          orgsSearchedID={this.state.orgsSearchedID}          //carouselData={carouselData}          onPanItemPress={this.onPanItemPress}        />        <View style={{ position: "absolute", top: 40, flexDirection: "row" }}>          <Icon            style={{ position: "absolute", right: 25 }}            name="menu"            color={"white"}            size={30}            type="materialicons"            onPress={() => {              this.props.navigation.navigate("DrawerOpen");            }}          />          <View style={{ flexGrow: 1 }}>            <Text style={{ textAlign: "center", color: "white" }}>              LatLng:{latitude.toFixed(2)}|{longitude.toFixed(2)}            </Text>            <Text style={{ textAlign: "center", color: "white" }}>              Delta:{latitudeDelta.toFixed(2)}|{longitudeDelta.toFixed(2)}            </Text>          </View>        </View>        <View style={styles.panContainer}>          <View            style={{              position: "absolute",              width: "100%",              bottom: 0,              flexDirection: "row",              justifyContent: "space-around"            }}          >            <Button              title={"r10"}              backgroundColor={"#009688"}              onPress={this.changeRadius10}            />            <Button              title={"r50"}              backgroundColor={"#009688"}              onPress={this.changeRadius50}            />            <Button              title={"search"}              backgroundColor={"#009688"}              onPress={() =>                this.onSearchArea(latitude, longitude, this.state.radius)              }            />            {/*<Button              title={"true"}              backgroundColor={"#009688"}              onPress={() => {                this.setState({ dataLoading: true });              }}            />            <Button              title={"false"}              backgroundColor={"#009688"}              onPress={() => {                this.setState({ dataLoading: false });              }}            />            <Button              title={"test"}              backgroundColor={"#009688"}              onPress={() => {                this.props.navigation.navigate("mapDetail");              }}            />*/}          </View>        </View>        {/*<ScrollView         horizontal         showsHorizontalScrollIndicator         style={{         position: "absolute",         bottom: 10,         height: 150         }}         contentContainerStyle={{         height: 120,         marginLeft: 100,         alignItems: "center",         justifyContent: "center"         }}         >         {Object.keys(orgsDetailList.list).map((orgKey, index) => {         let { name, address, city, zip, phone } = orgsDetailList.list[         orgKey         ];         return (         <Button         key={`orgDetail-${orgKey}`}         style={{         width: 200,         marginBottom: 10,         marginRight: 20,         padding: 10         }}         onPress={() => {         this.onPanItemPress(orgKey);         }}         >         <Text>         {orgKey}-{city}         </Text>         <Text>{name}</Text>         <Text>         Location: {address} - {city} - {zip}         </Text>         <Text>Call: {phone}</Text>         </Button>         );         })}         </ScrollView>*/}      </View>    );  }}const styles = StyleSheet.create({  container: {    flex: 1,    justifyContent: "center"  },  panContainer: {    width: "100%",    bottom: 0,    zIndex: 1,    position: "absolute",    backgroundColor: "gray"  },  centerPointer: {    width: 4,    height: 4,    backgroundColor: "white",    borderRadius: 25,    zIndex: 10  }});function mapStateToProps(state) {  return {    jobsList: state.jobsList.results,    petsByOrg: state.petsByOrg,    orgsDetailList: state.orgsDetailList  };}MapScreen.propTypes = {  jobsList: PropTypes.array.isRequired};MapScreen.defaultProps = {  jobsList: [],  petsByOrg:{},  orgsDetailList: {    //newAdded:null,    list: {}  }};export default connect(mapStateToProps, actions)(MapScreen);