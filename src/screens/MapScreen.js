import React, { Component } from "react";import PropTypes from "prop-types";import { Text, View } from "react-native";import { Button } from "react-native-elements";import { connect } from "react-redux";import * as actions from "../actions";import { MapView } from "expo";import mapDarkStyle from "../assets/mapDarkStyle";import Icon from "react-native-vector-icons/MaterialIcons";import GeoFire from "geofire";import { firedb } from "../modules/firebase";class MapScreen extends Component {  static navigationOptions = {    title: "Map",    tabBarIcon: ({ tintColor }) => {      return (        <Icon name="place" color={tintColor} size={20} type="materialicons" />      );    }  };  constructor(props) {    super(props);    this.state = {      region: {        latitude: 37.6,        longitude: -122,        longitudeDelta: 0.04,        latitudeDelta: 0.09      },      markersList: [],      currentCoords: null    };    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 1000    });  }  componentDidMount() {    this.geoQuery.on("ready", function() {      console.log(        "GeoQuery has loaded and fired all other events for initial data"      );    });    this.geoQuery.on("key_entered", (key, location, distance) => {      console.log(`key_entered: key: ${key} location: ${location} distance: ${distance}`      );      this.setState({        markersList: [...this.state.markersList, { key, location, distance }]      });      console.log('markersList ',this.state.markersList )    });    this.geoQuery.on("key_exited", function(key, location, distance) {      console.log(`key_exited: key: ${key} location: ${location} distance: ${distance}`);    });    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      this.setState({ region: { ...this.state.region, longitude, latitude } });    });    // let ref = firedb.ref("orgs");    // let geoFire = new GeoFire(ref);    // let geoQuery = geoFire.query({    //   center: [region.latitude, region.longitude],    //   radius: 1000    // });    // geoFire.set("some_key", [37.785326, -122.405696]).then(function() {    //   console.log("Provided key has been added to GeoFire");    // }, function(error) {    //   console.log("Error: " + error);    // });  }  onRegionChangeComplete = region => {    this.setState({ region });  };  onButtonPress = async () => {    await this.props.fetchJobs(this.state.region);    //this.props.navigation.navigate("deck");  };  onSearchOrgsButtonPress = async () => {    await this.props.fetchOrgs(this.state.region);    console.log("MapScreen/orgslist ", this.props.orgsList);    // this.props.navigation.navigate("deck");  };  onTest = () => {    // this.geoFire.set("targetLocation", [    //   this.state.region.latitude,    //   this.state.region.longitude    // ]);    this.geoQuery.updateCriteria({      center: [this.state.region.latitude, this.state.region.longitude],      radius: 100    });    console.log("Provided key has been added to GeoFire");  };  render() {    // if (!this.state.mapLoaded) {    //   // spinner to fake loading    //   return (    //     <View style={{ flex: 1, justifyContent: "center" }}>    //       <ActivityIndicator size={"large"} />    //     </View>    //   );    // }    return (      <View style={styles.container}>        <MapView          customMapStyle={mapDarkStyle}          provider={MapView.PROVIDER_GOOGLE}          style={styles.mapView}          region={this.state.region}          initialRegion={{            longitude: -100,            latitude: 37,            longitudeDelta: 0.04,            latitudeDelta: 0.09          }}          onRegionChangeComplete={this.onRegionChangeComplete}        >          {/*{this.props.jobsList.map(job => (*/}          {/*<MapView.Marker*/}          {/*key={`marker-${job.jobkey}-${job.latitude}-${job.longitude}`}*/}          {/*coordinate={{ latitude: job.latitude, longitude: job.longitude }}*/}          {/*title={"yoyo check now"}*/}          {/*description={"bala boom"}*/}          {/*/>*/}          {/*))}*/}          {this.state.markersList.map(marker => {            <MapView.Marker              key={`marker-${marker.key}`}              coordinate={{                latitude: marker.location[0],                longitude: marker.location[1]              }}              title={"yoyo check now"}              description={"bala boom"}            />;          })}        </MapView>        <View style={styles.searchButtonContainer}>          <Text style={{ textAlign: "center", color: "white" }}>            Lat: {this.state.region.latitude}          </Text>          <Text style={{ textAlign: "center", color: "white" }}>            Lng: {this.state.region.longitude}          </Text>          <Button            title={"Search This Area"}            backgroundColor={"#009688"}            onPress={this.onButtonPress}          />          <Button            title={"Search Orgs This Area"}            backgroundColor={"#009688"}            onPress={this.onSearchOrgsButtonPress}          />          <Button            title={"test change geo"}            backgroundColor={"#009688"}            onPress={this.onTest}          />        </View>      </View>    );  }}const styles = {  container: {    flex: 1,    justifyContent: "center"  },  mapView: {    flex: 1  },  searchButtonContainer: {    position: "absolute",    bottom: 8,    left: -8,    right: -8  }};const mapStateToProps = state => {  console.log("MapScreen/mapStateToProps ", state.orgsList);  return {    jobsList: state.jobsList.results,    petsList: state.petsList,    orgsList: state.orgsList  };};MapScreen.propTypes = {  jobsList: PropTypes.array.isRequired};MapScreen.defaultProps = {  jobsList: [],  petsList: [],  orgsList: []};export default connect(mapStateToProps, actions)(MapScreen);