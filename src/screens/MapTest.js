import React, { Component } from 'react';import { Animated, Dimensions, Easing, Text, View } from 'react-native';import { createStackNavigator } from 'react-navigation';import ReviewScreen from "../screens/Review/ReviewScreen";import SettingScreen from "./SettingScreen";import ReviewDetail from "./Review/ReviewDetail";import Icon from 'react-native-vector-icons/MaterialIcons';import _ from "lodash";const {width:SCREEN_WIDTH} = Dimensions.get('window')const Review = createStackNavigator({  review: { screen: ReviewScreen },  review_detail: { screen: ReviewDetail },  setting: { screen: SettingScreen },})class MapTest extends Component {  constructor (props){    super(props)    this.state={      drawerOpen:false,      anime_drawerOpen: new Animated.Value(0)    };    this.anime_drawerOpen = Animated.timing(this.state.anime_drawerOpen, {      toValue: 300,      duration: 300,      easing: Easing.linear    });    this.anime_drawerOpen2 = Animated.timing(this.state.anime_drawerOpen, {      toValue: 0,      duration: 300,      easing: Easing.linear    });  }  static navigationOptions = {    drawerLockMode: "locked-open",    header: null  };  static getDerivedStateFromProps(props,state){    if (_.get(props, "navigation.state.params.from") === "mapTest") {      console.log('drawer close anime')      return { drawerOpen: false };    }  }  componentDidUpdate(prevProps,prevState){    if (this.state.drawerOpen === true && this.state.drawerOpen !== prevState.drawerOpen) {      this.props.navigation.openDrawer();      this.anime_drawerOpen.start(this.state.anime_drawerOpen.setValue(0));    }    if (this.state.drawerOpen === false && this.state.drawerOpen !== prevState.drawerOpen) {      this.props.navigation.closeDrawer();      this.anime_drawerOpen2.start(this.state.anime_drawerOpen.setValue(300));    }  }  render() {    console.log('test', this.props.navigation)    const drawerScale = this.state.anime_drawerOpen.interpolate({      inputRange: [0, 300],      outputRange: [1, 0.5],      extrapolate: "clamp"    });    const drawerLeft = this.state.anime_drawerOpen.interpolate({      inputRange: [0, 300],      outputRange: [0, SCREEN_WIDTH * 0.5],      extrapolate: "clamp"    });    return (      <Animated.View style={{ overflow: "hidden", flex: 1, left: drawerLeft, transform: [{ scale: drawerScale }] }}>        <View style={{ zIndex: 101, position: "absolute", top: 40, flexDirection: "row" }}>          <Icon            style={{ position: "absolute", left: 25, zIndex: 1 }}            name="menu"            color={"white"}            size={30}            type="materialicons"            onPress={() => {              this.setState({ drawerOpen: true });              //this.anime_drawerOpen.start(this.state.anime_drawerOpen.setValue(0));              //this.props.navigation.toggleDrawer()//navigate("DrawerOpen");            }}          />        </View>        <View style={{          flex: 1,          backgroundColor: 'lightblue',          justifyContent: 'center',          alignItems: 'center'        }}>          <Text>I am in Main.js</Text>        </View>        <View style={{ flex: 4, backgroundColor: 'lightgreen' }}>          <Review />        </View>      </Animated.View>    )  }}export default MapTest;