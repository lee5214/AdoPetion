import React, { Component } from "react";import { ScrollView, Text } from "react-native";import { Button } from "react-native-elements";import { firedb, firestore } from "../modules/firebase";import GeoFire from "geofire";class Test extends Component {  constructor(props) {    super(props);    this.state = {      visible: false,      test: [],      orgsGeoList: [],      orgsDetailList: {}    };    this.geoFire = new GeoFire(firedb.ref("orgs"));    this.geoQuery = this.geoFire.query({      center: [0, 0],      radius: 0    });    this.orgsGeoList = [];    this.geoQuery.on("ready", () => {      let temp = [];      this.orgsGeoList.map(org => {        temp.push(this.fetchOrgByID(org.key));        firestore          .collection("orgs")          .doc(`${org.key}`)          .get()          .then(doc => temp.push(doc.data()))          .catch(err => console.log("firestore err: ", err));      });      console.log("ready : ", temp);      this.setState({ test:temp,orgsGeoList: this.orgsGeoList });    });    this.geoQuery.on("key_entered", async (key, location, distance) => {      console.log('key_entered')      this.orgsGeoList.push({ key, distance });      /*await firestore        .collection("orgs")        .doc(`${key}`)        .get()        .then(doc => this.orgsGeoList.push(doc.data()))        .catch(err=>console.log('firestore err: ',err))      ;*/      //console.log('key_entered: ',firestore.collection('orgs').doc(key).name)    });    /*this.geoQuery.on("key_exited", key => {      this.setState({ dataLoading: true });      delete this.markersHolder[key];    });*/  }  componentDidMount() {    navigator.geolocation.getCurrentPosition(pos => {      const longitude = pos.coords.longitude;      const latitude = pos.coords.latitude;      console.log(longitude, latitude);    });  }  componentDidUpdate(prevProps, prevState) {    //let temp = {};    /*if (this.state.orgsDetailList !== prevState.orgsDetailList) {      this.state.orgsGeoList.map(geo => {        if (this.state.orgsDetailList[geo.key]) {          temp[geo.key] = this.state.orgsDetailList[geo.key];        } else {          temp[geo.key] = firestore            .collection("orgs")            .doc(`${key}`)            .get()            .then(doc => this.orgsGeoList.push(doc.data()))            .catch(err => console.log("firestore err: ", err));        }      });    }*/    //this.setState({ orgsDetailList: temp });  }  fetchOrgByID = id => {    return firestore      .collection("orgs")      .doc(`${id}`)      .get()      .then(doc => doc.data())      .catch(err => console.log("firestore err: ", err));  };  updateCriteria =(lat,lng,rad)=>{    this.geoQuery.updateCriteria({      center: [lat, lng],      radius: rad    });  }  render() {    console.log(this.state.orgsGeoList);    console.log('test',this.state.test.length,this.state.test[1]);    return (      <ScrollView style={{ top: 50, flex: 1 }}>        <Button onPress={()=>this.updateCriteria(30,-120,100)}/>        {this.state.orgsGeoList.map(org => {          //let temp = this.fetchOrgByID(org.key);          return (            <Text key={org.key}>              {org.key} -- {org.distance.toFixed(2)}            </Text>          );        })}        <Text />      </ScrollView>    );  }}export default Test;