import React, { Component } from "react";import { Dimensions, Image, ScrollView, Text, View } from "react-native";import { connect } from "react-redux";import Carousel from "react-native-snap-carousel";const Screen_Width = Dimensions.get("screen").width;class MapDetail extends Component {  static navigationOptions = {    //header:null  };  renderItem = ({ item, index }) => {    let { animalID, name, sex, pictures } = item;    return (      <View>        <Text>{item.name}</Text>        <Image          source={{ uri: pictures[0].small.url }}          style={{ width: 200, height: 200 }}        />      </View>    );  };  render() {    const { petsByOrg } = this.props;    // get data passed from other screens, through navigate's params    const focusedOrg = this.props.navigation.state.params.focusedOrg;    let arr = [];    Object.keys(petsByOrg).map(pet => {      arr.push(petsByOrg[pet]);    });    return (      <View>        <Text style={{ fontSize: 20, fontWeight: "bold", color: "gray" }}>          {focusedOrg.name}          <Text>{focusedOrg.orgID}</Text>        </Text>        <Carousel          layout={"default"}          ref={c => {            this._carousel = c;          }}          containerCustomStyle={styles.carouselContainer}          data={arr}          renderItem={this.renderItem}          sliderWidth={400}          sliderHeight={500}          itemWidth={256}          itemHeight={200}          firstItem={0}          onScroll={this.test}        />        <ScrollView>          {Object.keys(petsByOrg).map(pet => {            let { animalID, name, sex, pictures } = petsByOrg[pet];            return (              <View key={animalID} style={{ justifyContent: "flex-start" }}>                <Text>{name}</Text>                <Text>{sex}</Text>                <ScrollView horizontal pagingEnabled>                  {pictures &&                    pictures.map((pic, index) => (                      <Image                        key={`${animalID}-pic-${index}`}                        style={{                          width: Screen_Width - 80,                          height: 200,                          marginLeft: 10,                          marginRight: 10                        }}                        source={{ uri: `${pic.fullsizeUrl}` }}                        onPress={this.openPetDetailContainer}                      />                    ))}                </ScrollView>              </View>            );          })}        </ScrollView>      </View>    );  }}const mapStateToProps = state => {  return {    petsByOrg: state.petsByOrg,    orgsDetailList: state.orgsDetailList  };};export default connect(mapStateToProps)(MapDetail);