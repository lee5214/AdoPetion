import React, { Component } from "react";import { connect } from "react-redux";import PropTypes from "prop-types";import { Animated, Dimensions, Easing, Image, ScrollView, Text, TouchableOpacity, View } from "react-native";import { Card } from "react-native-elements";import Icon from "react-native-vector-icons/MaterialIcons";import _ from "lodash";const {width:SCREEN_WIDTH} = Dimensions.get('window')class ReviewScreen extends Component {  constructor(props) {    super(props);    this.state = {      drawerOpen:false,      anime_drawerOpen: new Animated.Value(0)    };    this.anime_drawerOpen = Animated.timing(this.state.anime_drawerOpen, {      toValue: 300,      duration: 300,      easing: Easing.linear    });    this.anime_drawerOpen2 = Animated.timing(this.state.anime_drawerOpen, {      toValue: 0,      duration: 300,      easing: Easing.linear    });  }  static navigationOptions = ({ navigation }) => ({    drawerLockMode: "locked-open",    title: "Review",    tabBarLabel:'Review2',    headerRight: (      <Icon        name="settings"        size={20}        type="materialicons"        style={{ paddingRight: 20 }}        onPress={() => {          navigation.navigate('setting')        }}      />    ),    /*headerLeft: (      <Icon        name="menu"        size={30}        type="materialicons"        style={{ paddingLeft: 20 }}        onPress={() => {          //navigation.openDrawer()//navigate('DrawerToggle')//openDrawer()//this.setState({ drawerOpen: true });        }}      />    ),*/    tabBarOptions: {      tabBarIcon : ({tintColor}) => {        return <Icon name="favorite-border" color={ tintColor } size={ 20 } type="materialicons"/>;      }    }  });  getDerivedStateFromProps(props,state){    if (_.get(props, "navigation.state.params.from") === "review") {      return { drawerOpen: false };    }  }  componentDidUpdate(prevProps,prevState){    if (this.state.drawerOpen === true && this.state.drawerOpen !== prevState.drawerOpen) {      this.props.navigation.openDrawer();      this.anime_drawerOpen.start(this.state.anime_drawerOpen.setValue(0));    }    if (this.state.drawerOpen === false && this.state.drawerOpen !== prevState.drawerOpen) {      this.props.navigation.closeDrawer();      this.anime_drawerOpen2.start(this.state.anime_drawerOpen.setValue(300));    }  }  cardOnPress = animalID => {    this.props.navigation.navigate("review_detail", { petID: animalID });  };  render() {    const drawerScale = this.state.anime_drawerOpen.interpolate({      inputRange: [0, 300],      outputRange: [1, 0.5],      extrapolate: "clamp"    });    const drawerLeft = this.state.anime_drawerOpen.interpolate({      inputRange: [0, 300],      outputRange: [0, SCREEN_WIDTH * 0.5],      extrapolate: "clamp"    });    return (      <Animated.View style={{ overflow: "hidden", flex: 1, left: drawerLeft, transform: [{ scale: drawerScale }] }}>        {/*<View style={{ zIndex: 101, position: "absolute", top: 40, flexDirection: "row" }}>          <Icon            style={{ position: "absolute", left: 25, zIndex: 1 }}            name="menu"            color={"red"}            size={30}            type="materialicons"            onPress={() => {              this.setState({ drawerOpen: true });              //this.anime_drawerOpen.start(this.state.anime_drawerOpen.setValue(0));              //this.props.navigation.toggleDrawer()//navigate("DrawerOpen");            }}          />        </View>*/}      <ScrollView>        {this.props.likedPets.map(pet => {          //console.log('org==>',this.props.orgsDetailList.list[pet.orgID].geolocation||[])          const { name, animalID, orgID, descriptionPlain, pictures } = pet;          /*const initialRegion = {       latitude:this.props.orgsDetailList.list[orgID].geoLocation[0]||0,//latitude,       longitude:this.props.orgsDetailList[orgID].geoLocation[1]||0,       latitudeDelta: 0.045,       longitudeDelta: 0.02       };*/          return (            <TouchableOpacity underlayColor='red' activeOpacity={.9} onPress={() => this.cardOnPress(animalID)}>            <Card key={`reviewScreen-${animalID}`}>                <View style={{ height: 100 }}>                  <Text>{name}</Text>                  <View style={{ flexDirection: "row" }}>                    <Text style={{ flex: 3 }} numberOfLines={3}>                      {descriptionPlain}                    </Text>                    <Image style={{ flex: 1 }} source={{ uri: pictures[0].thumbnailUrl }} />                  </View>                </View>            </Card>            </TouchableOpacity>          );        })}      </ScrollView>      </Animated.View>    );  }}const styles = {  detailSection: {    marginTop: 10,    marginBottom: 10,    flexDirection: "row",    justifyContent: "space-around"  }};const mapStateToProps = state => {  return {    likedPets: state.likedPets,    orgsDetailList: state.orgsDetailList  };};ReviewScreen.defaultProps = {  likedPets: []};ReviewScreen.propTypes = {  likedPets: PropTypes.array.isRequired};export default connect(mapStateToProps, null)(ReviewScreen);