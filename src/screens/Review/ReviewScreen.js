import React, { Component } from "react";import { connect } from "react-redux";import PropTypes from "prop-types";import { Animated, Dimensions, Image, ScrollView, Text, TouchableOpacity, View } from "react-native";import { Card } from "react-native-elements";import Icon from "react-native-vector-icons/MaterialIcons";const { width: SCREEN_WIDTH } = Dimensions.get("window");class ReviewScreen extends Component {  static navigationOptions = ({ navigation }) => ({    drawerLockMode: "locked-open",    title: "Following",    tabBarLabel: "Review",    /*headerRight: (      <Icon        name="settings"        size={20}        type="materialicons"        style={{ paddingRight: 20 }}        onPress={() => {          navigation.navigate('setting')        }}      />    ),*/    /*headerLeft: (      <Icon        name="menu"        size={30}        type="materialicons"        style={{ paddingLeft: 20 }}        onPress={() => {          //navigation.openDrawer()//navigate('DrawerToggle')//openDrawer()//this.setState({ drawerOpen: true });        }}      />    ),*/    tabBarOptions: {      tabBarIcon: ({ tintColor }) => {        return <Icon name="favorite-border" color={tintColor} size={20} type="materialicons" />;      }    }  });  cardOnPress = pet => {    this.props.navigation.navigate("reviewDetail", { petObj: pet });  };  render() {    return (      <Animated.View style={{ overflow: "hidden", flex: 1 }}>        <ScrollView>          {this.props.likedPets.map(pet => {            //console.log('org==>',this.props.orgsDetailList.list[pet.orgID].geolocation||[])            const { name, animalID, orgID, descriptionPlain, pictures } = pet;            /*const initialRegion = {       latitude:this.props.orgsDetailList.list[orgID].geoLocation[0]||0,//latitude,       longitude:this.props.orgsDetailList[orgID].geoLocation[1]||0,       latitudeDelta: 0.045,       longitudeDelta: 0.02       };*/            return (              <TouchableOpacity                key={`likedPetList-${animalID}`}                activeOpacity={0.9}                onPress={() => this.cardOnPress(pet)}                style={{                  shadowColor: "black",                  shadowOffset: { height: 0, width: 0 },                  shadowOpacity: 0.1,                  shadowRadius: 10                }}              >                <Card key={`reviewScreen-${animalID}`}>                  <View style={{ height: 100 }}>                    <Text style={{fontWeight:'600',fontSize:14,marginVertical:10}}>{name}</Text>                    <View style={{ flexDirection: "row" }}>                      <Text style={{ flex: 1 }} numberOfLines={3}>                        {descriptionPlain}                      </Text>                      {_.has(pictures[0], "thumbnailUrl") && (                        <Image style={{width: 50, height: 50, marginLeft:10 }} source={{ uri: pictures[0].thumbnailUrl || null }} />                      )}                    </View>                  </View>                </Card>              </TouchableOpacity>            );          })}        </ScrollView>      </Animated.View>    );  }}const mapStateToProps = state => {  return {    likedPets: state.likedPets    //orgsDetailList: state.orgsDetailList  };};ReviewScreen.defaultProps = {  likedPets: []};ReviewScreen.propTypes = {  likedPets: PropTypes.array.isRequired};export default connect(mapStateToProps, null)(ReviewScreen);